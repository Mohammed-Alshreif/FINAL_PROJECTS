
FINAL_PROJECT_FEET.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080035f4  080035f4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f4  080035f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080035fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000084  08003680  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003680  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cf9  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e9  00000000  00000000  00026da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002c8  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000230  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001866  00000000  00000000  00028488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004116  00000000  00000000  00029cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b174  00000000  00000000  0002de04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00038f78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc8  00000000  00000000  00038ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	080035a0 	.word	0x080035a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	080035a0 	.word	0x080035a0

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2iz>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30f      	bcc.n	8000742 <__aeabi_f2iz+0x2a>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d90d      	bls.n	8000748 <__aeabi_f2iz+0x30>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000738:	fa23 f002 	lsr.w	r0, r3, r2
 800073c:	bf18      	it	ne
 800073e:	4240      	negne	r0, r0
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2iz+0x3a>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d105      	bne.n	800075e <__aeabi_f2iz+0x46>
 8000752:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000756:	bf08      	it	eq
 8000758:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr

08000764 <__aeabi_f2uiz>:
 8000764:	0042      	lsls	r2, r0, #1
 8000766:	d20e      	bcs.n	8000786 <__aeabi_f2uiz+0x22>
 8000768:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800076c:	d30b      	bcc.n	8000786 <__aeabi_f2uiz+0x22>
 800076e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000772:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000776:	d409      	bmi.n	800078c <__aeabi_f2uiz+0x28>
 8000778:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800077c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000780:	fa23 f002 	lsr.w	r0, r3, r2
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr
 800078c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000790:	d101      	bne.n	8000796 <__aeabi_f2uiz+0x32>
 8000792:	0242      	lsls	r2, r0, #9
 8000794:	d102      	bne.n	800079c <__aeabi_f2uiz+0x38>
 8000796:	f04f 30ff 	mov.w	r0, #4294967295
 800079a:	4770      	bx	lr
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <getposition>:
#include "STM32f103c6.h"
#include "GPIO_DRIVER.h"
uint8_t getposition(uint16_t pin_num){
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <getposition+0x14>
		rval =0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d101      	bne.n	80007c2 <getposition+0x1e>
		rval =4;
 80007be:	2304      	movs	r3, #4
 80007c0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d101      	bne.n	80007cc <getposition+0x28>
		rval =8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d101      	bne.n	80007d6 <getposition+0x32>
		rval =12;
 80007d2:	230c      	movs	r3, #12
 80007d4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d101      	bne.n	80007e0 <getposition+0x3c>
		rval =16;
 80007dc:	2310      	movs	r3, #16
 80007de:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	d101      	bne.n	80007ea <getposition+0x46>
		rval =20;
 80007e6:	2314      	movs	r3, #20
 80007e8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	2b06      	cmp	r3, #6
 80007ee:	d101      	bne.n	80007f4 <getposition+0x50>
		rval =24;
 80007f0:	2318      	movs	r3, #24
 80007f2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d101      	bne.n	80007fe <getposition+0x5a>
		rval =28;
 80007fa:	231c      	movs	r3, #28
 80007fc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b08      	cmp	r3, #8
 8000802:	d101      	bne.n	8000808 <getposition+0x64>
		rval =0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	2b09      	cmp	r3, #9
 800080c:	d101      	bne.n	8000812 <getposition+0x6e>
		rval =4;
 800080e:	2304      	movs	r3, #4
 8000810:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	2b0a      	cmp	r3, #10
 8000816:	d101      	bne.n	800081c <getposition+0x78>
		rval =8;
 8000818:	2308      	movs	r3, #8
 800081a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	2b0b      	cmp	r3, #11
 8000820:	d101      	bne.n	8000826 <getposition+0x82>
		rval =12;
 8000822:	230c      	movs	r3, #12
 8000824:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2b0c      	cmp	r3, #12
 800082a:	d101      	bne.n	8000830 <getposition+0x8c>
		rval =16;
 800082c:	2310      	movs	r3, #16
 800082e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	2b0d      	cmp	r3, #13
 8000834:	d101      	bne.n	800083a <getposition+0x96>
		rval =20;
 8000836:	2314      	movs	r3, #20
 8000838:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b0e      	cmp	r3, #14
 800083e:	d101      	bne.n	8000844 <getposition+0xa0>
		rval =24;
 8000840:	2318      	movs	r3, #24
 8000842:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d101      	bne.n	800084e <getposition+0xaa>
		rval =28;
 800084a:	231c      	movs	r3, #28
 800084c:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 800084e:	7bfb      	ldrb	r3, [r7, #15]


}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_typeDef* GPIOx,uint16_t pin,uint32_t pinmode){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	460b      	mov	r3, r1
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4a69      	ldr	r2, [pc, #420]	; (8000a14 <pinmode+0x1b8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <pinmode+0x24>
		GPIOA_Clock_Enable();
 8000872:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <pinmode+0x1bc>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a68      	ldr	r2, [pc, #416]	; (8000a18 <pinmode+0x1bc>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	e010      	b.n	80008a2 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4a66      	ldr	r2, [pc, #408]	; (8000a1c <pinmode+0x1c0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <pinmode+0x3a>
		GPIOB_Clock_Enable();
 8000888:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <pinmode+0x1bc>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a62      	ldr	r2, [pc, #392]	; (8000a18 <pinmode+0x1bc>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	e005      	b.n	80008a2 <pinmode+0x46>

	}
	else{
		GPIOC_Clock_Enable();
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <pinmode+0x1bc>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a5f      	ldr	r2, [pc, #380]	; (8000a18 <pinmode+0x1bc>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 80008a2:	897b      	ldrh	r3, [r7, #10]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d856      	bhi.n	8000956 <pinmode+0xfa>
		GPIOx->GPIOx_CRL &=~(0xf<<(getposition(pin)));
 80008a8:	897b      	ldrh	r3, [r7, #10]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff7a 	bl	80007a4 <getposition>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	230f      	movs	r3, #15
 80008b6:	4093      	lsls	r3, r2
 80008b8:	43da      	mvns	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	401a      	ands	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d002      	beq.n	80008d0 <pinmode+0x74>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b18      	cmp	r3, #24
 80008ce:	d133      	bne.n	8000938 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b18      	cmp	r3, #24
 80008d4:	d117      	bne.n	8000906 <pinmode+0xaa>
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 80008d6:	897b      	ldrh	r3, [r7, #10]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff63 	bl	80007a4 <getposition>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	2308      	movs	r3, #8
 80008e4:	fa03 f202 	lsl.w	r2, r3, r2
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	431a      	orrs	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	431a      	orrs	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000904:	e081      	b.n	8000a0a <pinmode+0x1ae>
			}
			else{
				GPIOx->GPIOx_CRL |=(0b1000<<(getposition(pin)));
 8000906:	897b      	ldrh	r3, [r7, #10]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff4b 	bl	80007a4 <getposition>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	2308      	movs	r3, #8
 8000914:	fa03 f202 	lsl.w	r2, r3, r2
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	431a      	orrs	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	601a      	str	r2, [r3, #0]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	43d2      	mvns	r2, r2
 8000930:	401a      	ands	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000936:	e068      	b.n	8000a0a <pinmode+0x1ae>
			}

		}
		else GPIOx->GPIOx_CRL |=(pinmode<<(getposition(pin)));
 8000938:	897b      	ldrh	r3, [r7, #10]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff32 	bl	80007a4 <getposition>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	fa03 f202 	lsl.w	r2, r3, r2
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	431a      	orrs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]

	}



}
 8000954:	e059      	b.n	8000a0a <pinmode+0x1ae>
	else if(pin>7){
 8000956:	897b      	ldrh	r3, [r7, #10]
 8000958:	2b07      	cmp	r3, #7
 800095a:	d956      	bls.n	8000a0a <pinmode+0x1ae>
		GPIOx->GPIOx_CRH &=~(0xf<<(getposition(pin)));
 800095c:	897b      	ldrh	r3, [r7, #10]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff20 	bl	80007a4 <getposition>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	230f      	movs	r3, #15
 800096a:	4093      	lsls	r3, r2
 800096c:	43da      	mvns	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	401a      	ands	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d002      	beq.n	8000984 <pinmode+0x128>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b18      	cmp	r3, #24
 8000982:	d133      	bne.n	80009ec <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b18      	cmp	r3, #24
 8000988:	d117      	bne.n	80009ba <pinmode+0x15e>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff09 	bl	80007a4 <getposition>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	2308      	movs	r3, #8
 8000998:	fa03 f202 	lsl.w	r2, r3, r2
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR |= (1<<pin);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	897a      	ldrh	r2, [r7, #10]
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	431a      	orrs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80009b8:	e027      	b.n	8000a0a <pinmode+0x1ae>
				GPIOx->GPIOx_CRH |=(0b1000<<(getposition(pin)));
 80009ba:	897b      	ldrh	r3, [r7, #10]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fef1 	bl	80007a4 <getposition>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	2308      	movs	r3, #8
 80009c8:	fa03 f202 	lsl.w	r2, r3, r2
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	605a      	str	r2, [r3, #4]
				GPIOx->GPIOx_ODR &=~(1<<pin);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	897a      	ldrh	r2, [r7, #10]
 80009dc:	2101      	movs	r1, #1
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	43d2      	mvns	r2, r2
 80009e4:	401a      	ands	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80009ea:	e00e      	b.n	8000a0a <pinmode+0x1ae>
		else GPIOx->GPIOx_CRH |=(pinmode<<(getposition(pin)));
 80009ec:	897b      	ldrh	r3, [r7, #10]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fed8 	bl	80007a4 <getposition>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	fa03 f202 	lsl.w	r2, r3, r2
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	605a      	str	r2, [r3, #4]
}
 8000a08:	e7ff      	b.n	8000a0a <pinmode+0x1ae>
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_typeDef* GPIOx, uint16_t pin){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
	return (GPIOx->GPIOx_IDR>>pin)&1;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	fa22 f303 	lsr.w	r3, r2, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PWM>:
//==================================== stepper motor
static uint32_t stepper_steps=0;
static uint8_t stepper_flage=0;
//===============================================================================================

void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f023 0201 	bic.w	r2, r3, #1
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 8000a6e:	e011      	b.n	8000a94 <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000a86:	d303      	bcc.n	8000a90 <PWM+0x48>
			user_pre+=2;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e001      	b.n	8000a94 <PWM+0x4c>
		}
		else{
			user_flage=0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8000a94:	7ffb      	ldrb	r3, [r7, #31]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d0ea      	beq.n	8000a70 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4a8e      	ldr	r2, [pc, #568]	; (8000cd8 <PWM+0x290>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	f040 80d7 	bne.w	8000c52 <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 8000aa4:	4b8d      	ldr	r3, [pc, #564]	; (8000cdc <PWM+0x294>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a8c      	ldr	r2, [pc, #560]	; (8000cdc <PWM+0x294>)
 8000aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aae:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();//enable porta clock
 8000ab0:	4b8a      	ldr	r3, [pc, #552]	; (8000cdc <PWM+0x294>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a89      	ldr	r2, [pc, #548]	; (8000cdc <PWM+0x294>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000abc:	4b87      	ldr	r3, [pc, #540]	; (8000cdc <PWM+0x294>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a86      	ldr	r2, [pc, #536]	; (8000cdc <PWM+0x294>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d12d      	bne.n	8000b2a <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000ace:	220b      	movs	r2, #11
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4883      	ldr	r0, [pc, #524]	; (8000ce0 <PWM+0x298>)
 8000ad4:	f7ff fec2 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f043 0208 	orr.w	r2, r3, #8
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	f043 0201 	orr.w	r2, r3, #1
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <PWM+0x29c>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	099a      	lsrs	r2, r3, #6
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b14:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	f043 0203 	orr.w	r2, r3, #3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	e2f6      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d12d      	bne.n	8000b8c <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000b30:	220b      	movs	r2, #11
 8000b32:	2109      	movs	r1, #9
 8000b34:	486a      	ldr	r0, [pc, #424]	; (8000ce0 <PWM+0x298>)
 8000b36:	f7ff fe91 	bl	800085c <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	f043 0210 	orr.w	r2, r3, #16
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	4a5f      	ldr	r2, [pc, #380]	; (8000ce4 <PWM+0x29c>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	099a      	lsrs	r2, r3, #6
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f043 0205 	orr.w	r2, r3, #5
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	e2c5      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d12d      	bne.n	8000bee <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000b92:	220b      	movs	r2, #11
 8000b94:	210a      	movs	r1, #10
 8000b96:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <PWM+0x298>)
 8000b98:	f7ff fe60 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	f043 0208 	orr.w	r2, r3, #8
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <PWM+0x29c>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	099a      	lsrs	r2, r3, #6
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	f043 0209 	orr.w	r2, r3, #9
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	e294      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	f040 8291 	bne.w	8001118 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000bf6:	220b      	movs	r2, #11
 8000bf8:	210b      	movs	r1, #11
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <PWM+0x298>)
 8000bfc:	f7ff fe2e 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <PWM+0x29c>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	099a      	lsrs	r2, r3, #6
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	f043 0211 	orr.w	r2, r3, #17
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	e262      	b.n	8001118 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	f040 80c8 	bne.w	8000dec <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <PWM+0x294>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <PWM+0x294>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <PWM+0x294>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <PWM+0x294>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <PWM+0x294>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <PWM+0x294>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d130      	bne.n	8000ce8 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000c86:	220b      	movs	r2, #11
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <PWM+0x298>)
 8000c8c:	f7ff fde6 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f043 0208 	orr.w	r2, r3, #8
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fb02 f303 	mul.w	r3, r2, r3
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <PWM+0x29c>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	099a      	lsrs	r2, r3, #6
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	f043 0203 	orr.w	r2, r3, #3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	e220      	b.n	8001118 <PWM+0x6d0>
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d127      	bne.n	8000d3e <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000cee:	220b      	movs	r2, #11
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	488d      	ldr	r0, [pc, #564]	; (8000f28 <PWM+0x4e0>)
 8000cf4:	f7ff fdb2 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f043 0210 	orr.w	r2, r3, #16
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <PWM+0x4e4>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	099a      	lsrs	r2, r3, #6
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	f043 0205 	orr.w	r2, r3, #5
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	e1ec      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d127      	bne.n	8000d94 <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000d44:	220b      	movs	r2, #11
 8000d46:	2102      	movs	r1, #2
 8000d48:	4877      	ldr	r0, [pc, #476]	; (8000f28 <PWM+0x4e0>)
 8000d4a:	f7ff fd87 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f043 0208 	orr.w	r2, r3, #8
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	4a6c      	ldr	r2, [pc, #432]	; (8000f2c <PWM+0x4e4>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	099a      	lsrs	r2, r3, #6
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f043 0209 	orr.w	r2, r3, #9
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	e1c1      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	f040 81be 	bne.w	8001118 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000d9c:	220b      	movs	r2, #11
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4861      	ldr	r0, [pc, #388]	; (8000f28 <PWM+0x4e0>)
 8000da2:	f7ff fd5b 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4a56      	ldr	r2, [pc, #344]	; (8000f2c <PWM+0x4e4>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	099a      	lsrs	r2, r3, #6
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f043 0211 	orr.w	r2, r3, #17
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	e195      	b.n	8001118 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <PWM+0x4e8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f040 80cf 	bne.w	8000f94 <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 8000df6:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <PWM+0x4ec>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <PWM+0x4ec>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();//enable porta clock
 8000e02:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <PWM+0x4ec>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a4b      	ldr	r2, [pc, #300]	; (8000f34 <PWM+0x4ec>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6193      	str	r3, [r2, #24]
		GPIOB_Clock_Enable();//enable porta clock
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <PWM+0x4ec>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a48      	ldr	r2, [pc, #288]	; (8000f34 <PWM+0x4ec>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <PWM+0x4ec>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <PWM+0x4ec>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d127      	bne.n	8000e7c <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000e2c:	220b      	movs	r2, #11
 8000e2e:	2106      	movs	r1, #6
 8000e30:	483d      	ldr	r0, [pc, #244]	; (8000f28 <PWM+0x4e0>)
 8000e32:	f7ff fd13 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f043 0208 	orr.w	r2, r3, #8
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <PWM+0x4e4>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	099a      	lsrs	r2, r3, #6
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	f043 0203 	orr.w	r2, r3, #3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	e14d      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d127      	bne.n	8000ed2 <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000e82:	220b      	movs	r2, #11
 8000e84:	2107      	movs	r1, #7
 8000e86:	4828      	ldr	r0, [pc, #160]	; (8000f28 <PWM+0x4e0>)
 8000e88:	f7ff fce8 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f043 0210 	orr.w	r2, r3, #16
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <PWM+0x4e4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	099a      	lsrs	r2, r3, #6
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f043 0205 	orr.w	r2, r3, #5
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	e122      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d131      	bne.n	8000f3c <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000ed8:	220b      	movs	r2, #11
 8000eda:	2100      	movs	r1, #0
 8000edc:	4816      	ldr	r0, [pc, #88]	; (8000f38 <PWM+0x4f0>)
 8000ede:	f7ff fcbd 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f043 0208 	orr.w	r2, r3, #8
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <PWM+0x4e4>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099a      	lsrs	r2, r3, #6
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f043 0209 	orr.w	r2, r3, #9
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	e0f7      	b.n	8001118 <PWM+0x6d0>
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	10624dd3 	.word	0x10624dd3
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	f040 80ea 	bne.w	8001118 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000f44:	220b      	movs	r2, #11
 8000f46:	2101      	movs	r1, #1
 8000f48:	4882      	ldr	r0, [pc, #520]	; (8001154 <PWM+0x70c>)
 8000f4a:	f7ff fc87 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	4a77      	ldr	r2, [pc, #476]	; (8001158 <PWM+0x710>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	099a      	lsrs	r2, r3, #6
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f043 0211 	orr.w	r2, r3, #17
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	e0c1      	b.n	8001118 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a71      	ldr	r2, [pc, #452]	; (800115c <PWM+0x714>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 80bd 	bne.w	8001118 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <PWM+0x718>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a6f      	ldr	r2, [pc, #444]	; (8001160 <PWM+0x718>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();//enable porta clock
 8000faa:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <PWM+0x718>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <PWM+0x718>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6193      	str	r3, [r2, #24]
		AFIO_Clock_Enable();//enable AF io clock
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <PWM+0x718>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a69      	ldr	r2, [pc, #420]	; (8001160 <PWM+0x718>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d127      	bne.n	8001018 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000fc8:	220b      	movs	r2, #11
 8000fca:	2106      	movs	r1, #6
 8000fcc:	4861      	ldr	r0, [pc, #388]	; (8001154 <PWM+0x70c>)
 8000fce:	f7ff fc45 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f043 0208 	orr.w	r2, r3, #8
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	fb02 f303 	mul.w	r3, r2, r3
 8000ffe:	4a56      	ldr	r2, [pc, #344]	; (8001158 <PWM+0x710>)
 8001000:	fba2 2303 	umull	r2, r3, r2, r3
 8001004:	099a      	lsrs	r2, r3, #6
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f043 0203 	orr.w	r2, r3, #3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	e07f      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d127      	bne.n	800106e <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800101e:	220b      	movs	r2, #11
 8001020:	2107      	movs	r1, #7
 8001022:	484c      	ldr	r0, [pc, #304]	; (8001154 <PWM+0x70c>)
 8001024:	f7ff fc1a 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f043 0210 	orr.w	r2, r3, #16
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4a40      	ldr	r2, [pc, #256]	; (8001158 <PWM+0x710>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	099a      	lsrs	r2, r3, #6
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f043 0205 	orr.w	r2, r3, #5
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	e054      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d127      	bne.n	80010c4 <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001074:	220b      	movs	r2, #11
 8001076:	2108      	movs	r1, #8
 8001078:	4836      	ldr	r0, [pc, #216]	; (8001154 <PWM+0x70c>)
 800107a:	f7ff fbef 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f043 0208 	orr.w	r2, r3, #8
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <PWM+0x710>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	099a      	lsrs	r2, r3, #6
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f043 0209 	orr.w	r2, r3, #9
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	e029      	b.n	8001118 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d126      	bne.n	8001118 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80010ca:	220b      	movs	r2, #11
 80010cc:	2109      	movs	r1, #9
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <PWM+0x70c>)
 80010d0:	f7ff fbc4 	bl	800085c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4a15      	ldr	r2, [pc, #84]	; (8001158 <PWM+0x710>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	099a      	lsrs	r2, r3, #6
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f043 0211 	orr.w	r2, r3, #17
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	601a      	str	r2, [r3, #0]

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010c00 	.word	0x40010c00
 8001158:	10624dd3 	.word	0x10624dd3
 800115c:	40000800 	.word	0x40000800
 8001160:	40021000 	.word	0x40021000

08001164 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	460b      	mov	r3, r1
 8001172:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001174:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <delay+0x150>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <delay+0x150>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001180:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <delay+0x154>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <delay+0x154>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001190:	2301      	movs	r3, #1
 8001192:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8001198:	2301      	movs	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 800119c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a0:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10d      	bne.n	80011c8 <delay+0x64>
		unit = 1000;
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d902      	bls.n	80011c2 <delay+0x5e>
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e030      	b.n	8001224 <delay+0xc0>
		else increase = 10;
 80011c2:	230a      	movs	r3, #10
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e02d      	b.n	8001224 <delay+0xc0>
	}
	else {
		unit = 1000000;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <delay+0x158>)
 80011ca:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d902      	bls.n	80011dc <delay+0x78>
 80011d6:	230a      	movs	r3, #10
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e023      	b.n	8001224 <delay+0xc0>
		else increase = 5;
 80011dc:	2305      	movs	r3, #5
 80011de:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 80011e0:	e020      	b.n	8001224 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	fb02 f203 	mul.w	r2, r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80011fe:	d30f      	bcc.n	8001220 <delay+0xbc>

			if(user_pre>65530){
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001206:	4293      	cmp	r3, r2
 8001208:	d905      	bls.n	8001216 <delay+0xb2>
				user_pre=65530;
 800120a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800120e:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	e006      	b.n	8001224 <delay+0xc0>
			}
			else user_pre+=increase;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4413      	add	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e001      	b.n	8001224 <delay+0xc0>

		}
		else{
			user_flage=0;
 8001220:	2300      	movs	r3, #0
 8001222:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d0db      	beq.n	80011e2 <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <delay+0x154>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <delay+0x154>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <delay+0x154>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <delay+0x154>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0204 	orr.w	r2, r2, #4
 8001248:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <delay+0x154>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <delay+0x154>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <delay+0x154>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <delay+0x154>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	3a01      	subs	r2, #1
 800126a:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <delay+0x154>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <delay+0x154>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <delay+0x154>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <delay+0x154>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <delay+0x15c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <delay+0x160>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <delay+0x160>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800129e:	bf00      	nop
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <delay+0x15c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1fb      	bne.n	80012a0 <delay+0x13c>

	}
}
 80012a8:	bf00      	nop
 80012aa:	3724      	adds	r7, #36	; 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	2000001c 	.word	0x2000001c
 80012bc:	000f4240 	.word	0x000f4240
 80012c0:	20000018 	.word	0x20000018
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d12f      	bne.n	800134c <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012fa:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800130a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0208 	orr.w	r2, r2, #8
 800131a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800132a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800135a:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800138a:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <SPWM_timer_INIT+0x100>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SPWM_timer_INIT+0x100>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SPWM_timer_INIT+0x100>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000

080013cc <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <TIM2_IRQHandler+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <TIM2_IRQHandler+0x34>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <TIM2_IRQHandler+0x38>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <TIM2_IRQHandler+0x34>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <TIM2_IRQHandler+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000001c 	.word	0x2000001c
 8001404:	20000018 	.word	0x20000018

08001408 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <TIM3_IRQHandler+0x6c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d119      	bne.n	8001448 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <TIM3_IRQHandler+0x70>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <TIM3_IRQHandler+0x70>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <TIM3_IRQHandler+0x74>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <TIM3_IRQHandler+0x74>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a13      	ldr	r2, [pc, #76]	; (800147c <TIM3_IRQHandler+0x74>)
 8001430:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8001432:	e01c      	b.n	800146e <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <TIM3_IRQHandler+0x6c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <TIM3_IRQHandler+0x70>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <TIM3_IRQHandler+0x70>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	e012      	b.n	800146e <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <TIM3_IRQHandler+0x78>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <TIM3_IRQHandler+0x78>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <TIM3_IRQHandler+0x78>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <TIM3_IRQHandler+0x78>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <TIM3_IRQHandler+0x7c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4798      	blx	r3
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000a8 	.word	0x200000a8
 8001478:	40000400 	.word	0x40000400
 800147c:	200000a4 	.word	0x200000a4
 8001480:	200000cc 	.word	0x200000cc
 8001484:	200000c0 	.word	0x200000c0

08001488 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <TIM4_IRQHandler+0x24>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <TIM4_IRQHandler+0x24>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <TIM4_IRQHandler+0x28>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <TIM4_IRQHandler+0x28>)
 80014a2:	801a      	strh	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40000800 	.word	0x40000800
 80014b0:	200000a2 	.word	0x200000a2

080014b4 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 80014b8:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d911      	bls.n	80014e8 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80014c4:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <TIM1_UP_IRQHandler+0x184>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80014ca:	4b5c      	ldr	r3, [pc, #368]	; (800163c <TIM1_UP_IRQHandler+0x188>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80014d0:	4b58      	ldr	r3, [pc, #352]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a5a      	ldr	r2, [pc, #360]	; (8001640 <TIM1_UP_IRQHandler+0x18c>)
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014dc:	4b55      	ldr	r3, [pc, #340]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a53      	ldr	r2, [pc, #332]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e018      	b.n	800151a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b63      	cmp	r3, #99	; 0x63
 80014ee:	d814      	bhi.n	800151a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80014f0:	4b51      	ldr	r3, [pc, #324]	; (8001638 <TIM1_UP_IRQHandler+0x184>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <TIM1_UP_IRQHandler+0x188>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <TIM1_UP_IRQHandler+0x190>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <TIM1_UP_IRQHandler+0x190>)
 8001508:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <TIM1_UP_IRQHandler+0x18c>)
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	fbb3 f3f2 	udiv	r3, r3, r2
 8001516:	4a46      	ldr	r2, [pc, #280]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 8001518:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <TIM1_UP_IRQHandler+0x190>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d110      	bne.n	8001544 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8001532:	4b45      	ldr	r3, [pc, #276]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1a      	ldr	r2, [r3, #32]
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0210 	orr.w	r2, r2, #16
 8001540:	621a      	str	r2, [r3, #32]
 8001542:	e013      	b.n	800156c <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <TIM1_UP_IRQHandler+0x190>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a1a      	ldr	r2, [r3, #32]
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0210 	bic.w	r2, r2, #16
 800155a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a1a      	ldr	r2, [r3, #32]
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <TIM1_UP_IRQHandler+0x188>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d11c      	bne.n	80015ae <TIM1_UP_IRQHandler+0xfa>
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <TIM1_UP_IRQHandler+0x184>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d118      	bne.n	80015ae <TIM1_UP_IRQHandler+0xfa>
		top=c;
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <TIM1_UP_IRQHandler+0x198>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 8001582:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <TIM1_UP_IRQHandler+0x19c>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	f7ff fe99 	bl	80012c8 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <TIM1_UP_IRQHandler+0x18c>)
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e035      	b.n	800161a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <TIM1_UP_IRQHandler+0x184>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d129      	bne.n	800160a <TIM1_UP_IRQHandler+0x156>
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <TIM1_UP_IRQHandler+0x188>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d125      	bne.n	800160a <TIM1_UP_IRQHandler+0x156>
		top=c;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <TIM1_UP_IRQHandler+0x198>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80015c4:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	491c      	ldr	r1, [pc, #112]	; (8001640 <TIM1_UP_IRQHandler+0x18c>)
 80015d0:	7809      	ldrb	r1, [r1, #0]
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015da:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <TIM1_UP_IRQHandler+0x19c>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2301      	movs	r3, #1
 80015ea:	f7ff fe6d 	bl	80012c8 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <TIM1_UP_IRQHandler+0x180>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <TIM1_UP_IRQHandler+0x18c>)
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d10b      	bne.n	800161a <TIM1_UP_IRQHandler+0x166>
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <TIM1_UP_IRQHandler+0x17c>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e007      	b.n	800161a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <TIM1_UP_IRQHandler+0x194>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	611a      	str	r2, [r3, #16]
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000014 	.word	0x20000014
 8001634:	20000008 	.word	0x20000008
 8001638:	200000a0 	.word	0x200000a0
 800163c:	20000004 	.word	0x20000004
 8001640:	200000c8 	.word	0x200000c8
 8001644:	20000005 	.word	0x20000005
 8001648:	20000000 	.word	0x20000000
 800164c:	20000010 	.word	0x20000010
 8001650:	2000000c 	.word	0x2000000c

08001654 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d139      	bne.n	80016de <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d175      	bne.n	800175c <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->RCC_CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <MCAL_speed_init+0x114>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a3c      	ldr	r2, [pc, #240]	; (8001768 <MCAL_speed_init+0x114>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->RCC_CFGR &=~(0b1111<<18);
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <MCAL_speed_init+0x114>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <MCAL_speed_init+0x114>)
 8001682:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8001686:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <MCAL_speed_init+0x114>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a36      	ldr	r2, [pc, #216]	; (8001768 <MCAL_speed_init+0x114>)
 800168e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001692:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <MCAL_speed_init+0x114>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a33      	ldr	r2, [pc, #204]	; (8001768 <MCAL_speed_init+0x114>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->RCC_CFGR &=~(0b11<<0);
 80016a0:	4b31      	ldr	r3, [pc, #196]	; (8001768 <MCAL_speed_init+0x114>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a30      	ldr	r2, [pc, #192]	; (8001768 <MCAL_speed_init+0x114>)
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MCAL_speed_init+0x114>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <MCAL_speed_init+0x114>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->RCC_CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MCAL_speed_init+0x114>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <MCAL_speed_init+0x114>)
 80016be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c2:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MCAL_speed_init+0x114>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <MCAL_speed_init+0x114>)
 80016ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80016ce:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->RCC_CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <MCAL_speed_init+0x114>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <MCAL_speed_init+0x114>)
 80016d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]

		}
	}


}
 80016dc:	e03e      	b.n	800175c <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d13b      	bne.n	800175c <MCAL_speed_init+0x108>
			RCC->RCC_CR &=~(1<<18);
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MCAL_speed_init+0x114>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MCAL_speed_init+0x114>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]
			RCC->RCC_CR|=(1<<16);
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MCAL_speed_init+0x114>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MCAL_speed_init+0x114>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR|=(1<<16);
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MCAL_speed_init+0x114>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <MCAL_speed_init+0x114>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MCAL_speed_init+0x114>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <MCAL_speed_init+0x114>)
 800170e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001712:	6053      	str	r3, [r2, #4]
			RCC->RCC_CR |=(1<<24);//pll on
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MCAL_speed_init+0x114>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MCAL_speed_init+0x114>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]
			RCC->RCC_CFGR &=~(0b11<<0);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MCAL_speed_init+0x114>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <MCAL_speed_init+0x114>)
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b10<<0);//10: PLL selected as system clock
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MCAL_speed_init+0x114>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <MCAL_speed_init+0x114>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MCAL_speed_init+0x114>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <MCAL_speed_init+0x114>)
 800173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001742:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MCAL_speed_init+0x114>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <MCAL_speed_init+0x114>)
 800174a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800174e:	6053      	str	r3, [r2, #4]
			RCC->RCC_CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <MCAL_speed_init+0x114>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <MCAL_speed_init+0x114>)
 8001756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800175a:	6053      	str	r3, [r2, #4]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <ADC_INIT>:
#include "stm32f103c6_ADC.h"


uint8_t flag_ADC_INIT=0;

void ADC_INIT(ADC_typeDef* ADCx,uint8_t ADC_STATE_){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]

	if(ADC_STATE_==ADC_STATE_START){
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d132      	bne.n	80017e4 <ADC_INIT+0x78>
		if(ADCx==ADC1){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <ADC_INIT+0xac>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d106      	bne.n	8001794 <ADC_INIT+0x28>
			ADC1_Clock_Enable();
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <ADC_INIT+0xb0>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <ADC_INIT+0xb0>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	e009      	b.n	80017a8 <ADC_INIT+0x3c>
		}
		else if(ADCx==ADC2){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a22      	ldr	r2, [pc, #136]	; (8001820 <ADC_INIT+0xb4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d105      	bne.n	80017a8 <ADC_INIT+0x3c>
			ADC2_Clock_Enable();
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <ADC_INIT+0xb0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <ADC_INIT+0xb0>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6193      	str	r3, [r2, #24]
		//		then it wakes up the ADC from Power Down state.
		//		Conversion starts when this bit holds a value of 1 and a 1 is written to it. The application
		//		should allow a delay of tSTAB between power up and start of conversion. Refer to Figure 23.
		//		0: Disable ADC conversion/calibration and go to power down mode.
		//		1: Enable ADC and to start conversion
		ADCx->ADC_CR2 |=(1<<0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
		//		Bit 1 CONT: Continuous conversion
		//		This bit is set and cleared by software. If set conversion takes place continuously till this bit is
		//		reset.
		//		0: Single conversion mode
		//		1: Continuous conversion mode
		ADCx->ADC_CR2 &=~(1<<1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 0202 	bic.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
		//		Bit 2 CAL: A/D Calibration
		//		This bit is set by software to start the calibration. It is reset by hardware after calibration is
		//		complete.
		//		0: Calibration completed
		//		1: Enable calibratio
		ADCx->ADC_CR2 |=(1<<2);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
		while(((ADCx->ADC_CR2>>2)&1)){};
 80017cc:	bf00      	nop
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f8      	bne.n	80017ce <ADC_INIT+0x62>


		flag_ADC_INIT=1;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <ADC_INIT+0xb8>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
		ADC2_Clock_DESABLE();
		flag_ADC_INIT=0;
	}


}
 80017e2:	e014      	b.n	800180e <ADC_INIT+0xa2>
		ADCx->ADC_CR2 &=~(1<<0);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 0201 	bic.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
		ADC1_Clock_DESABLE();
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <ADC_INIT+0xb0>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a09      	ldr	r2, [pc, #36]	; (800181c <ADC_INIT+0xb0>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	60d3      	str	r3, [r2, #12]
		ADC2_Clock_DESABLE();
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <ADC_INIT+0xb0>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <ADC_INIT+0xb0>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	60d3      	str	r3, [r2, #12]
		flag_ADC_INIT=0;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <ADC_INIT+0xb8>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40012400 	.word	0x40012400
 800181c:	40021000 	.word	0x40021000
 8001820:	40012800 	.word	0x40012800
 8001824:	200000a9 	.word	0x200000a9

08001828 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d854      	bhi.n	80018e2 <Enable_NVIC+0xba>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <Enable_NVIC+0x18>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001881 	.word	0x08001881
 8001844:	0800188f 	.word	0x0800188f
 8001848:	0800189d 	.word	0x0800189d
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018b9 	.word	0x080018b9
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	080018c7 	.word	0x080018c7
 8001860:	080018c7 	.word	0x080018c7
 8001864:	080018c7 	.word	0x080018c7
 8001868:	080018d5 	.word	0x080018d5
 800186c:	080018d5 	.word	0x080018d5
 8001870:	080018d5 	.word	0x080018d5
 8001874:	080018d5 	.word	0x080018d5
 8001878:	080018d5 	.word	0x080018d5
 800187c:	080018d5 	.word	0x080018d5
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <Enable_NVIC+0xc4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <Enable_NVIC+0xc4>)
 8001886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188a:	6013      	str	r3, [r2, #0]
		break;
 800188c:	e029      	b.n	80018e2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <Enable_NVIC+0xc4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a16      	ldr	r2, [pc, #88]	; (80018ec <Enable_NVIC+0xc4>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	6013      	str	r3, [r2, #0]
		break;
 800189a:	e022      	b.n	80018e2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <Enable_NVIC+0xc4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <Enable_NVIC+0xc4>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
		break;
 80018a8:	e01b      	b.n	80018e2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <Enable_NVIC+0xc4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <Enable_NVIC+0xc4>)
 80018b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b4:	6013      	str	r3, [r2, #0]
		break;
 80018b6:	e014      	b.n	80018e2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <Enable_NVIC+0xc4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <Enable_NVIC+0xc4>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c2:	6013      	str	r3, [r2, #0]
		break;
 80018c4:	e00d      	b.n	80018e2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <Enable_NVIC+0xc4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <Enable_NVIC+0xc4>)
 80018cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d0:	6013      	str	r3, [r2, #0]
		break;
 80018d2:	e006      	b.n	80018e2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <Enable_NVIC+0xc8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <Enable_NVIC+0xc8>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
		break;
 80018e0:	bf00      	nop
	}


}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000e104 	.word	0xe000e104

080018f4 <EXTI>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXTI(GPIO_typeDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres) (void)){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	4613      	mov	r3, r2
 8001904:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	2204      	movs	r2, #4
 800190a:	4619      	mov	r1, r3
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7fe ffa5 	bl	800085c <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 8001912:	897b      	ldrh	r3, [r7, #10]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	f200 8385 	bhi.w	8002024 <EXTI+0x730>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <EXTI+0x2c>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001961 	.word	0x08001961
 8001924:	080019c7 	.word	0x080019c7
 8001928:	08001a2d 	.word	0x08001a2d
 800192c:	08001a93 	.word	0x08001a93
 8001930:	08001af9 	.word	0x08001af9
 8001934:	08001b5f 	.word	0x08001b5f
 8001938:	08001bd9 	.word	0x08001bd9
 800193c:	08001c3f 	.word	0x08001c3f
 8001940:	08001ca5 	.word	0x08001ca5
 8001944:	08001d0b 	.word	0x08001d0b
 8001948:	08001d71 	.word	0x08001d71
 800194c:	08001dd7 	.word	0x08001dd7
 8001950:	08001e53 	.word	0x08001e53
 8001954:	08001eb9 	.word	0x08001eb9
 8001958:	08001f1f 	.word	0x08001f1f
 800195c:	08001f83 	.word	0x08001f83
		case pin0:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<0);
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <EXTI+0x2b8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a91      	ldr	r2, [pc, #580]	; (8001bac <EXTI+0x2b8>)
 8001966:	f023 030f 	bic.w	r3, r3, #15
 800196a:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<0);}
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a90      	ldr	r2, [pc, #576]	; (8001bb0 <EXTI+0x2bc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d106      	bne.n	8001982 <EXTI+0x8e>
 8001974:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <EXTI+0x2b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a8c      	ldr	r2, [pc, #560]	; (8001bac <EXTI+0x2b8>)
 800197a:	f023 030f 	bic.w	r3, r3, #15
 800197e:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}

			break;
 8001980:	e331      	b.n	8001fe6 <EXTI+0x6f2>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<0);}
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a8b      	ldr	r2, [pc, #556]	; (8001bb4 <EXTI+0x2c0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d106      	bne.n	8001998 <EXTI+0xa4>
 800198a:	4b88      	ldr	r3, [pc, #544]	; (8001bac <EXTI+0x2b8>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4a87      	ldr	r2, [pc, #540]	; (8001bac <EXTI+0x2b8>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6093      	str	r3, [r2, #8]
			break;
 8001996:	e326      	b.n	8001fe6 <EXTI+0x6f2>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<0);}
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a87      	ldr	r2, [pc, #540]	; (8001bb8 <EXTI+0x2c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d106      	bne.n	80019ae <EXTI+0xba>
 80019a0:	4b82      	ldr	r3, [pc, #520]	; (8001bac <EXTI+0x2b8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a81      	ldr	r2, [pc, #516]	; (8001bac <EXTI+0x2b8>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6093      	str	r3, [r2, #8]
			break;
 80019ac:	e31b      	b.n	8001fe6 <EXTI+0x6f2>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<0);}
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a82      	ldr	r2, [pc, #520]	; (8001bbc <EXTI+0x2c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	f040 8317 	bne.w	8001fe6 <EXTI+0x6f2>
 80019b8:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <EXTI+0x2b8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a7b      	ldr	r2, [pc, #492]	; (8001bac <EXTI+0x2b8>)
 80019be:	f043 0303 	orr.w	r3, r3, #3
 80019c2:	6093      	str	r3, [r2, #8]
			break;
 80019c4:	e30f      	b.n	8001fe6 <EXTI+0x6f2>
		case pin1:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<4);
 80019c6:	4b79      	ldr	r3, [pc, #484]	; (8001bac <EXTI+0x2b8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4a78      	ldr	r2, [pc, #480]	; (8001bac <EXTI+0x2b8>)
 80019cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d0:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<4);}
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a76      	ldr	r2, [pc, #472]	; (8001bb0 <EXTI+0x2bc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <EXTI+0xf4>
 80019da:	4b74      	ldr	r3, [pc, #464]	; (8001bac <EXTI+0x2b8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4a73      	ldr	r2, [pc, #460]	; (8001bac <EXTI+0x2b8>)
 80019e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019e4:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}

			break;
 80019e6:	e300      	b.n	8001fea <EXTI+0x6f6>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<4);}
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <EXTI+0x2c0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d106      	bne.n	80019fe <EXTI+0x10a>
 80019f0:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <EXTI+0x2b8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	; (8001bac <EXTI+0x2b8>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6093      	str	r3, [r2, #8]
			break;
 80019fc:	e2f5      	b.n	8001fea <EXTI+0x6f6>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<4);}
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a6d      	ldr	r2, [pc, #436]	; (8001bb8 <EXTI+0x2c4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d106      	bne.n	8001a14 <EXTI+0x120>
 8001a06:	4b69      	ldr	r3, [pc, #420]	; (8001bac <EXTI+0x2b8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a68      	ldr	r2, [pc, #416]	; (8001bac <EXTI+0x2b8>)
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	6093      	str	r3, [r2, #8]
			break;
 8001a12:	e2ea      	b.n	8001fea <EXTI+0x6f6>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<4);}
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <EXTI+0x2c8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f040 82e6 	bne.w	8001fea <EXTI+0x6f6>
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <EXTI+0x2b8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4a62      	ldr	r2, [pc, #392]	; (8001bac <EXTI+0x2b8>)
 8001a24:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a28:	6093      	str	r3, [r2, #8]
			break;
 8001a2a:	e2de      	b.n	8001fea <EXTI+0x6f6>
		case pin2:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<8);
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <EXTI+0x2b8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <EXTI+0x2b8>)
 8001a32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a36:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<8);}
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <EXTI+0x2bc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d106      	bne.n	8001a4e <EXTI+0x15a>
 8001a40:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <EXTI+0x2b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a59      	ldr	r2, [pc, #356]	; (8001bac <EXTI+0x2b8>)
 8001a46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a4a:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}

			break;
 8001a4c:	e2cf      	b.n	8001fee <EXTI+0x6fa>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<8);}
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <EXTI+0x2c0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d106      	bne.n	8001a64 <EXTI+0x170>
 8001a56:	4b55      	ldr	r3, [pc, #340]	; (8001bac <EXTI+0x2b8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4a54      	ldr	r2, [pc, #336]	; (8001bac <EXTI+0x2b8>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6093      	str	r3, [r2, #8]
			break;
 8001a62:	e2c4      	b.n	8001fee <EXTI+0x6fa>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<8);}
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <EXTI+0x2c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d106      	bne.n	8001a7a <EXTI+0x186>
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <EXTI+0x2b8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <EXTI+0x2b8>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6093      	str	r3, [r2, #8]
			break;
 8001a78:	e2b9      	b.n	8001fee <EXTI+0x6fa>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<8);}
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <EXTI+0x2c8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	f040 82b5 	bne.w	8001fee <EXTI+0x6fa>
 8001a84:	4b49      	ldr	r3, [pc, #292]	; (8001bac <EXTI+0x2b8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <EXTI+0x2b8>)
 8001a8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a8e:	6093      	str	r3, [r2, #8]
			break;
 8001a90:	e2ad      	b.n	8001fee <EXTI+0x6fa>
		case pin3:
			AFIO->AFIO_EXTICR1 &=~(0b1111<<12);
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <EXTI+0x2b8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4a45      	ldr	r2, [pc, #276]	; (8001bac <EXTI+0x2b8>)
 8001a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a9c:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR1 &=~(0b1111<<12);}
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <EXTI+0x2bc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d106      	bne.n	8001ab4 <EXTI+0x1c0>
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <EXTI+0x2b8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4a40      	ldr	r2, [pc, #256]	; (8001bac <EXTI+0x2b8>)
 8001aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ab0:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}

			break;
 8001ab2:	e29e      	b.n	8001ff2 <EXTI+0x6fe>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR1 |= (0b0001<<12);}
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <EXTI+0x2c0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d106      	bne.n	8001aca <EXTI+0x1d6>
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <EXTI+0x2b8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <EXTI+0x2b8>)
 8001ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac6:	6093      	str	r3, [r2, #8]
			break;
 8001ac8:	e293      	b.n	8001ff2 <EXTI+0x6fe>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR1 |= (0b0010<<12);}
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <EXTI+0x2c4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d106      	bne.n	8001ae0 <EXTI+0x1ec>
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <EXTI+0x2b8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a35      	ldr	r2, [pc, #212]	; (8001bac <EXTI+0x2b8>)
 8001ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001adc:	6093      	str	r3, [r2, #8]
			break;
 8001ade:	e288      	b.n	8001ff2 <EXTI+0x6fe>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR1 |= (0b0011<<12);}
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <EXTI+0x2c8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f040 8284 	bne.w	8001ff2 <EXTI+0x6fe>
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <EXTI+0x2b8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <EXTI+0x2b8>)
 8001af0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001af4:	6093      	str	r3, [r2, #8]
			break;
 8001af6:	e27c      	b.n	8001ff2 <EXTI+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<0);
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <EXTI+0x2b8>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <EXTI+0x2b8>)
 8001afe:	f023 030f 	bic.w	r3, r3, #15
 8001b02:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<0);}
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <EXTI+0x2bc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d106      	bne.n	8001b1a <EXTI+0x226>
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <EXTI+0x2b8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <EXTI+0x2b8>)
 8001b12:	f023 030f 	bic.w	r3, r3, #15
 8001b16:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}

			break;
 8001b18:	e26d      	b.n	8001ff6 <EXTI+0x702>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<0);}
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <EXTI+0x2c0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d106      	bne.n	8001b30 <EXTI+0x23c>
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <EXTI+0x2b8>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <EXTI+0x2b8>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	60d3      	str	r3, [r2, #12]
			break;
 8001b2e:	e262      	b.n	8001ff6 <EXTI+0x702>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<0);}
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <EXTI+0x2c4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d106      	bne.n	8001b46 <EXTI+0x252>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <EXTI+0x2b8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <EXTI+0x2b8>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	60d3      	str	r3, [r2, #12]
			break;
 8001b44:	e257      	b.n	8001ff6 <EXTI+0x702>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<0);}
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <EXTI+0x2c8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f040 8253 	bne.w	8001ff6 <EXTI+0x702>
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <EXTI+0x2b8>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <EXTI+0x2b8>)
 8001b56:	f043 0303 	orr.w	r3, r3, #3
 8001b5a:	60d3      	str	r3, [r2, #12]
			break;
 8001b5c:	e24b      	b.n	8001ff6 <EXTI+0x702>
		case pin5:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<4);
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <EXTI+0x2b8>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <EXTI+0x2b8>)
 8001b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b68:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<4);}
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <EXTI+0x2bc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d106      	bne.n	8001b80 <EXTI+0x28c>
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <EXTI+0x2b8>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <EXTI+0x2b8>)
 8001b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b7c:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}

			break;
 8001b7e:	e23c      	b.n	8001ffa <EXTI+0x706>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<4);}
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <EXTI+0x2c0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d106      	bne.n	8001b96 <EXTI+0x2a2>
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <EXTI+0x2b8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <EXTI+0x2b8>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	60d3      	str	r3, [r2, #12]
			break;
 8001b94:	e231      	b.n	8001ffa <EXTI+0x706>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<4);}
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <EXTI+0x2c4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d110      	bne.n	8001bc0 <EXTI+0x2cc>
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <EXTI+0x2b8>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a02      	ldr	r2, [pc, #8]	; (8001bac <EXTI+0x2b8>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	60d3      	str	r3, [r2, #12]
			break;
 8001baa:	e226      	b.n	8001ffa <EXTI+0x706>
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<4);}
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a93      	ldr	r2, [pc, #588]	; (8001e10 <EXTI+0x51c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f040 8218 	bne.w	8001ffa <EXTI+0x706>
 8001bca:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <EXTI+0x520>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4a91      	ldr	r2, [pc, #580]	; (8001e14 <EXTI+0x520>)
 8001bd0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001bd4:	60d3      	str	r3, [r2, #12]
			break;
 8001bd6:	e210      	b.n	8001ffa <EXTI+0x706>
		case pin6:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<8);
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <EXTI+0x520>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a8d      	ldr	r2, [pc, #564]	; (8001e14 <EXTI+0x520>)
 8001bde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001be2:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<8);}
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a8c      	ldr	r2, [pc, #560]	; (8001e18 <EXTI+0x524>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d106      	bne.n	8001bfa <EXTI+0x306>
 8001bec:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <EXTI+0x520>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a88      	ldr	r2, [pc, #544]	; (8001e14 <EXTI+0x520>)
 8001bf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bf6:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}

			break;
 8001bf8:	e201      	b.n	8001ffe <EXTI+0x70a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<8);}
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <EXTI+0x528>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <EXTI+0x31c>
 8001c02:	4b84      	ldr	r3, [pc, #528]	; (8001e14 <EXTI+0x520>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4a83      	ldr	r2, [pc, #524]	; (8001e14 <EXTI+0x520>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	60d3      	str	r3, [r2, #12]
			break;
 8001c0e:	e1f6      	b.n	8001ffe <EXTI+0x70a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<8);}
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a83      	ldr	r2, [pc, #524]	; (8001e20 <EXTI+0x52c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d106      	bne.n	8001c26 <EXTI+0x332>
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <EXTI+0x520>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4a7d      	ldr	r2, [pc, #500]	; (8001e14 <EXTI+0x520>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	60d3      	str	r3, [r2, #12]
			break;
 8001c24:	e1eb      	b.n	8001ffe <EXTI+0x70a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<8);}
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <EXTI+0x51c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	f040 81e7 	bne.w	8001ffe <EXTI+0x70a>
 8001c30:	4b78      	ldr	r3, [pc, #480]	; (8001e14 <EXTI+0x520>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <EXTI+0x520>)
 8001c36:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c3a:	60d3      	str	r3, [r2, #12]
			break;
 8001c3c:	e1df      	b.n	8001ffe <EXTI+0x70a>
		case pin7:
			AFIO->AFIO_EXTICR2 &=~(0b1111<<12);
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <EXTI+0x520>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a74      	ldr	r2, [pc, #464]	; (8001e14 <EXTI+0x520>)
 8001c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c48:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR2 &=~(0b1111<<12);}
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a72      	ldr	r2, [pc, #456]	; (8001e18 <EXTI+0x524>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d106      	bne.n	8001c60 <EXTI+0x36c>
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <EXTI+0x520>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4a6f      	ldr	r2, [pc, #444]	; (8001e14 <EXTI+0x520>)
 8001c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c5c:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}

			break;
 8001c5e:	e1d0      	b.n	8002002 <EXTI+0x70e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR2 |= (0b0001<<12);}
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4a6e      	ldr	r2, [pc, #440]	; (8001e1c <EXTI+0x528>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d106      	bne.n	8001c76 <EXTI+0x382>
 8001c68:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <EXTI+0x520>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <EXTI+0x520>)
 8001c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c72:	60d3      	str	r3, [r2, #12]
			break;
 8001c74:	e1c5      	b.n	8002002 <EXTI+0x70e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR2 |= (0b0010<<12);}
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a69      	ldr	r2, [pc, #420]	; (8001e20 <EXTI+0x52c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d106      	bne.n	8001c8c <EXTI+0x398>
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <EXTI+0x520>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4a64      	ldr	r2, [pc, #400]	; (8001e14 <EXTI+0x520>)
 8001c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c88:	60d3      	str	r3, [r2, #12]
			break;
 8001c8a:	e1ba      	b.n	8002002 <EXTI+0x70e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR2 |= (0b0011<<12);}
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <EXTI+0x51c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f040 81b6 	bne.w	8002002 <EXTI+0x70e>
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <EXTI+0x520>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a5e      	ldr	r2, [pc, #376]	; (8001e14 <EXTI+0x520>)
 8001c9c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001ca0:	60d3      	str	r3, [r2, #12]
			break;
 8001ca2:	e1ae      	b.n	8002002 <EXTI+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<0);
 8001ca4:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <EXTI+0x520>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	4a5a      	ldr	r2, [pc, #360]	; (8001e14 <EXTI+0x520>)
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<0);}
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <EXTI+0x524>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d106      	bne.n	8001cc6 <EXTI+0x3d2>
 8001cb8:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <EXTI+0x520>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	4a55      	ldr	r2, [pc, #340]	; (8001e14 <EXTI+0x520>)
 8001cbe:	f023 030f 	bic.w	r3, r3, #15
 8001cc2:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}

			break;
 8001cc4:	e19f      	b.n	8002006 <EXTI+0x712>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<0);}
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a54      	ldr	r2, [pc, #336]	; (8001e1c <EXTI+0x528>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d106      	bne.n	8001cdc <EXTI+0x3e8>
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <EXTI+0x520>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <EXTI+0x520>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6113      	str	r3, [r2, #16]
			break;
 8001cda:	e194      	b.n	8002006 <EXTI+0x712>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<0);}
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <EXTI+0x52c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d106      	bne.n	8001cf2 <EXTI+0x3fe>
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <EXTI+0x520>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <EXTI+0x520>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	6113      	str	r3, [r2, #16]
			break;
 8001cf0:	e189      	b.n	8002006 <EXTI+0x712>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<0);}
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <EXTI+0x51c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f040 8185 	bne.w	8002006 <EXTI+0x712>
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <EXTI+0x520>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <EXTI+0x520>)
 8001d02:	f043 0303 	orr.w	r3, r3, #3
 8001d06:	6113      	str	r3, [r2, #16]
			break;
 8001d08:	e17d      	b.n	8002006 <EXTI+0x712>
		case pin9:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<4);
 8001d0a:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <EXTI+0x520>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <EXTI+0x520>)
 8001d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d14:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<4);}
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <EXTI+0x524>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d106      	bne.n	8001d2c <EXTI+0x438>
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <EXTI+0x520>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a3c      	ldr	r2, [pc, #240]	; (8001e14 <EXTI+0x520>)
 8001d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d28:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}

			break;
 8001d2a:	e16e      	b.n	800200a <EXTI+0x716>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<4);}
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <EXTI+0x528>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d106      	bne.n	8001d42 <EXTI+0x44e>
 8001d34:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <EXTI+0x520>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <EXTI+0x520>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	6113      	str	r3, [r2, #16]
			break;
 8001d40:	e163      	b.n	800200a <EXTI+0x716>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<4);}
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4a36      	ldr	r2, [pc, #216]	; (8001e20 <EXTI+0x52c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d106      	bne.n	8001d58 <EXTI+0x464>
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <EXTI+0x520>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <EXTI+0x520>)
 8001d50:	f043 0320 	orr.w	r3, r3, #32
 8001d54:	6113      	str	r3, [r2, #16]
			break;
 8001d56:	e158      	b.n	800200a <EXTI+0x716>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<4);}
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <EXTI+0x51c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	f040 8154 	bne.w	800200a <EXTI+0x716>
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <EXTI+0x520>)
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <EXTI+0x520>)
 8001d68:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d6c:	6113      	str	r3, [r2, #16]
			break;
 8001d6e:	e14c      	b.n	800200a <EXTI+0x716>
		case pin10:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<8);
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <EXTI+0x520>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <EXTI+0x520>)
 8001d76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d7a:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<8);}
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <EXTI+0x524>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d106      	bne.n	8001d92 <EXTI+0x49e>
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <EXTI+0x520>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <EXTI+0x520>)
 8001d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d8e:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}

			break;
 8001d90:	e13d      	b.n	800200e <EXTI+0x71a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<8);}
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <EXTI+0x528>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d106      	bne.n	8001da8 <EXTI+0x4b4>
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <EXTI+0x520>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <EXTI+0x520>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6113      	str	r3, [r2, #16]
			break;
 8001da6:	e132      	b.n	800200e <EXTI+0x71a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<8);}
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <EXTI+0x52c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d106      	bne.n	8001dbe <EXTI+0x4ca>
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <EXTI+0x520>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <EXTI+0x520>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	6113      	str	r3, [r2, #16]
			break;
 8001dbc:	e127      	b.n	800200e <EXTI+0x71a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<8);}
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <EXTI+0x51c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 8123 	bne.w	800200e <EXTI+0x71a>
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <EXTI+0x520>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <EXTI+0x520>)
 8001dce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001dd2:	6113      	str	r3, [r2, #16]
			break;
 8001dd4:	e11b      	b.n	800200e <EXTI+0x71a>
		case pin11:
			AFIO->AFIO_EXTICR3 &=~(0b1111<<12);
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <EXTI+0x520>)
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <EXTI+0x520>)
 8001ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001de0:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR3 &=~(0b1111<<12);}
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <EXTI+0x524>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d106      	bne.n	8001df8 <EXTI+0x504>
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <EXTI+0x520>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <EXTI+0x520>)
 8001df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001df4:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}

			break;
 8001df6:	e10c      	b.n	8002012 <EXTI+0x71e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR3 |= (0b0001<<12);}
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <EXTI+0x528>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <EXTI+0x530>
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <EXTI+0x520>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <EXTI+0x520>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0a:	6113      	str	r3, [r2, #16]
			break;
 8001e0c:	e101      	b.n	8002012 <EXTI+0x71e>
 8001e0e:	bf00      	nop
 8001e10:	40011400 	.word	0x40011400
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR3 |= (0b0010<<12);}
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a98      	ldr	r2, [pc, #608]	; (8002088 <EXTI+0x794>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d106      	bne.n	8001e3a <EXTI+0x546>
 8001e2c:	4b97      	ldr	r3, [pc, #604]	; (800208c <EXTI+0x798>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <EXTI+0x798>)
 8001e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e36:	6113      	str	r3, [r2, #16]
			break;
 8001e38:	e0eb      	b.n	8002012 <EXTI+0x71e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR3 |= (0b0011<<12);}
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a94      	ldr	r2, [pc, #592]	; (8002090 <EXTI+0x79c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	f040 80e7 	bne.w	8002012 <EXTI+0x71e>
 8001e44:	4b91      	ldr	r3, [pc, #580]	; (800208c <EXTI+0x798>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4a90      	ldr	r2, [pc, #576]	; (800208c <EXTI+0x798>)
 8001e4a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e4e:	6113      	str	r3, [r2, #16]
			break;
 8001e50:	e0df      	b.n	8002012 <EXTI+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<0);
 8001e52:	4b8e      	ldr	r3, [pc, #568]	; (800208c <EXTI+0x798>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4a8d      	ldr	r2, [pc, #564]	; (800208c <EXTI+0x798>)
 8001e58:	f023 030f 	bic.w	r3, r3, #15
 8001e5c:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<0);}
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a8c      	ldr	r2, [pc, #560]	; (8002094 <EXTI+0x7a0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <EXTI+0x580>
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <EXTI+0x798>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a88      	ldr	r2, [pc, #544]	; (800208c <EXTI+0x798>)
 8001e6c:	f023 030f 	bic.w	r3, r3, #15
 8001e70:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}

			break;
 8001e72:	e0d0      	b.n	8002016 <EXTI+0x722>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<0);}
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a88      	ldr	r2, [pc, #544]	; (8002098 <EXTI+0x7a4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d106      	bne.n	8001e8a <EXTI+0x596>
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <EXTI+0x798>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	4a82      	ldr	r2, [pc, #520]	; (800208c <EXTI+0x798>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6153      	str	r3, [r2, #20]
			break;
 8001e88:	e0c5      	b.n	8002016 <EXTI+0x722>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<0);}
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <EXTI+0x794>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d106      	bne.n	8001ea0 <EXTI+0x5ac>
 8001e92:	4b7e      	ldr	r3, [pc, #504]	; (800208c <EXTI+0x798>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a7d      	ldr	r2, [pc, #500]	; (800208c <EXTI+0x798>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6153      	str	r3, [r2, #20]
			break;
 8001e9e:	e0ba      	b.n	8002016 <EXTI+0x722>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<0);}
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a7b      	ldr	r2, [pc, #492]	; (8002090 <EXTI+0x79c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f040 80b6 	bne.w	8002016 <EXTI+0x722>
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <EXTI+0x798>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a77      	ldr	r2, [pc, #476]	; (800208c <EXTI+0x798>)
 8001eb0:	f043 0303 	orr.w	r3, r3, #3
 8001eb4:	6153      	str	r3, [r2, #20]
			break;
 8001eb6:	e0ae      	b.n	8002016 <EXTI+0x722>
		case pin13:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<4);
 8001eb8:	4b74      	ldr	r3, [pc, #464]	; (800208c <EXTI+0x798>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	4a73      	ldr	r2, [pc, #460]	; (800208c <EXTI+0x798>)
 8001ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec2:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<4);}
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a73      	ldr	r2, [pc, #460]	; (8002094 <EXTI+0x7a0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d106      	bne.n	8001eda <EXTI+0x5e6>
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	; (800208c <EXTI+0x798>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	; (800208c <EXTI+0x798>)
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}

			break;
 8001ed8:	e09f      	b.n	800201a <EXTI+0x726>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<4);}
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <EXTI+0x7a4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d106      	bne.n	8001ef0 <EXTI+0x5fc>
 8001ee2:	4b6a      	ldr	r3, [pc, #424]	; (800208c <EXTI+0x798>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4a69      	ldr	r2, [pc, #420]	; (800208c <EXTI+0x798>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	6153      	str	r3, [r2, #20]
			break;
 8001eee:	e094      	b.n	800201a <EXTI+0x726>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<4);}
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a65      	ldr	r2, [pc, #404]	; (8002088 <EXTI+0x794>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d106      	bne.n	8001f06 <EXTI+0x612>
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <EXTI+0x798>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a63      	ldr	r2, [pc, #396]	; (800208c <EXTI+0x798>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6153      	str	r3, [r2, #20]
			break;
 8001f04:	e089      	b.n	800201a <EXTI+0x726>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<4);}
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a61      	ldr	r2, [pc, #388]	; (8002090 <EXTI+0x79c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f040 8085 	bne.w	800201a <EXTI+0x726>
 8001f10:	4b5e      	ldr	r3, [pc, #376]	; (800208c <EXTI+0x798>)
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	4a5d      	ldr	r2, [pc, #372]	; (800208c <EXTI+0x798>)
 8001f16:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001f1a:	6153      	str	r3, [r2, #20]
			break;
 8001f1c:	e07d      	b.n	800201a <EXTI+0x726>
		case pin14:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<8);
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	; (800208c <EXTI+0x798>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a5a      	ldr	r2, [pc, #360]	; (800208c <EXTI+0x798>)
 8001f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f28:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<8);}
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a59      	ldr	r2, [pc, #356]	; (8002094 <EXTI+0x7a0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d106      	bne.n	8001f40 <EXTI+0x64c>
 8001f32:	4b56      	ldr	r3, [pc, #344]	; (800208c <EXTI+0x798>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4a55      	ldr	r2, [pc, #340]	; (800208c <EXTI+0x798>)
 8001f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f3c:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}

			break;
 8001f3e:	e06e      	b.n	800201e <EXTI+0x72a>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<8);}
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a55      	ldr	r2, [pc, #340]	; (8002098 <EXTI+0x7a4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d106      	bne.n	8001f56 <EXTI+0x662>
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <EXTI+0x798>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4a4f      	ldr	r2, [pc, #316]	; (800208c <EXTI+0x798>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6153      	str	r3, [r2, #20]
			break;
 8001f54:	e063      	b.n	800201e <EXTI+0x72a>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<8);}
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <EXTI+0x794>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d106      	bne.n	8001f6c <EXTI+0x678>
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <EXTI+0x798>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a4a      	ldr	r2, [pc, #296]	; (800208c <EXTI+0x798>)
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	6153      	str	r3, [r2, #20]
			break;
 8001f6a:	e058      	b.n	800201e <EXTI+0x72a>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<8);}
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a48      	ldr	r2, [pc, #288]	; (8002090 <EXTI+0x79c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d154      	bne.n	800201e <EXTI+0x72a>
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <EXTI+0x798>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	4a44      	ldr	r2, [pc, #272]	; (800208c <EXTI+0x798>)
 8001f7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f7e:	6153      	str	r3, [r2, #20]
			break;
 8001f80:	e04d      	b.n	800201e <EXTI+0x72a>
		case pin15:
			AFIO->AFIO_EXTICR4 &=~(0b1111<<12);
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <EXTI+0x798>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a41      	ldr	r2, [pc, #260]	; (800208c <EXTI+0x798>)
 8001f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f8c:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->AFIO_EXTICR4 &=~(0b1111<<12);}
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a40      	ldr	r2, [pc, #256]	; (8002094 <EXTI+0x7a0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d106      	bne.n	8001fa4 <EXTI+0x6b0>
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <EXTI+0x798>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <EXTI+0x798>)
 8001f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fa0:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}

			break;
 8001fa2:	e03e      	b.n	8002022 <EXTI+0x72e>
			else if(PORTx==GPIOB){AFIO->AFIO_EXTICR4 |= (0b0001<<12);}
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <EXTI+0x7a4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d106      	bne.n	8001fba <EXTI+0x6c6>
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <EXTI+0x798>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4a36      	ldr	r2, [pc, #216]	; (800208c <EXTI+0x798>)
 8001fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb6:	6153      	str	r3, [r2, #20]
			break;
 8001fb8:	e033      	b.n	8002022 <EXTI+0x72e>
			else if(PORTx==GPIOC){AFIO->AFIO_EXTICR4 |= (0b0010<<12);}
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a32      	ldr	r2, [pc, #200]	; (8002088 <EXTI+0x794>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d106      	bne.n	8001fd0 <EXTI+0x6dc>
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <EXTI+0x798>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a31      	ldr	r2, [pc, #196]	; (800208c <EXTI+0x798>)
 8001fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fcc:	6153      	str	r3, [r2, #20]
			break;
 8001fce:	e028      	b.n	8002022 <EXTI+0x72e>
			else if(PORTx==GPIOD){AFIO->AFIO_EXTICR4 |= (0b0011<<12);}
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <EXTI+0x79c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d124      	bne.n	8002022 <EXTI+0x72e>
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <EXTI+0x798>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <EXTI+0x798>)
 8001fde:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001fe2:	6153      	str	r3, [r2, #20]
			break;
 8001fe4:	e01d      	b.n	8002022 <EXTI+0x72e>
			break;
 8001fe6:	bf00      	nop
 8001fe8:	e01c      	b.n	8002024 <EXTI+0x730>
			break;
 8001fea:	bf00      	nop
 8001fec:	e01a      	b.n	8002024 <EXTI+0x730>
			break;
 8001fee:	bf00      	nop
 8001ff0:	e018      	b.n	8002024 <EXTI+0x730>
			break;
 8001ff2:	bf00      	nop
 8001ff4:	e016      	b.n	8002024 <EXTI+0x730>
			break;
 8001ff6:	bf00      	nop
 8001ff8:	e014      	b.n	8002024 <EXTI+0x730>
			break;
 8001ffa:	bf00      	nop
 8001ffc:	e012      	b.n	8002024 <EXTI+0x730>
			break;
 8001ffe:	bf00      	nop
 8002000:	e010      	b.n	8002024 <EXTI+0x730>
			break;
 8002002:	bf00      	nop
 8002004:	e00e      	b.n	8002024 <EXTI+0x730>
			break;
 8002006:	bf00      	nop
 8002008:	e00c      	b.n	8002024 <EXTI+0x730>
			break;
 800200a:	bf00      	nop
 800200c:	e00a      	b.n	8002024 <EXTI+0x730>
			break;
 800200e:	bf00      	nop
 8002010:	e008      	b.n	8002024 <EXTI+0x730>
			break;
 8002012:	bf00      	nop
 8002014:	e006      	b.n	8002024 <EXTI+0x730>
			break;
 8002016:	bf00      	nop
 8002018:	e004      	b.n	8002024 <EXTI+0x730>
			break;
 800201a:	bf00      	nop
 800201c:	e002      	b.n	8002024 <EXTI+0x730>
			break;
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <EXTI+0x730>
			break;
 8002022:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXIT->EXTI_RTSR &=~(1<<pin);
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <EXTI+0x7a8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	897a      	ldrh	r2, [r7, #10]
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	43d2      	mvns	r2, r2
 8002032:	4611      	mov	r1, r2
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <EXTI+0x7a8>)
 8002036:	400b      	ands	r3, r1
 8002038:	6093      	str	r3, [r2, #8]
	EXIT->EXTI_FTSR &=~(1<<pin);
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <EXTI+0x7a8>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	897a      	ldrh	r2, [r7, #10]
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	43d2      	mvns	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <EXTI+0x7a8>)
 800204c:	400b      	ands	r3, r1
 800204e:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <EXTI+0x778>
		EXIT->EXTI_RTSR |= (1<<pin);
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <EXTI+0x7a8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	897a      	ldrh	r2, [r7, #10]
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <EXTI+0x7a8>)
 8002066:	430b      	orrs	r3, r1
 8002068:	6093      	str	r3, [r2, #8]
 800206a:	e02d      	b.n	80020c8 <EXTI+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 800206c:	893b      	ldrh	r3, [r7, #8]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d116      	bne.n	80020a0 <EXTI+0x7ac>
		EXIT->EXTI_FTSR |= (1<<pin);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <EXTI+0x7a8>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	897a      	ldrh	r2, [r7, #10]
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4611      	mov	r1, r2
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <EXTI+0x7a8>)
 8002082:	430b      	orrs	r3, r1
 8002084:	60d3      	str	r3, [r2, #12]
 8002086:	e01f      	b.n	80020c8 <EXTI+0x7d4>
 8002088:	40011000 	.word	0x40011000
 800208c:	40010000 	.word	0x40010000
 8002090:	40011400 	.word	0x40011400
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40010400 	.word	0x40010400
	}
	else{
		EXIT->EXTI_RTSR |= (1<<pin);
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <EXTI+0x804>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	897a      	ldrh	r2, [r7, #10]
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4611      	mov	r1, r2
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <EXTI+0x804>)
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6093      	str	r3, [r2, #8]
		EXIT->EXTI_FTSR |= (1<<pin);
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <EXTI+0x804>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	897a      	ldrh	r2, [r7, #10]
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <EXTI+0x804>)
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	490c      	ldr	r1, [pc, #48]	; (80020fc <EXTI+0x808>)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXIT->EXTI_IMR |=(1<<pin);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <EXTI+0x804>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	897a      	ldrh	r2, [r7, #10]
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <EXTI+0x804>)
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fb9d 	bl	8001828 <Enable_NVIC>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40010400 	.word	0x40010400
 80020fc:	200000d0 	.word	0x200000d0

08002100 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXIT->EXTI_PR |= (1<<0);
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <EXTI0_IRQHandler+0x1c>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <EXTI0_IRQHandler+0x1c>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <EXTI0_IRQHandler+0x20>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4798      	blx	r3
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40010400 	.word	0x40010400
 8002120:	200000d0 	.word	0x200000d0

08002124 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<1);
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <EXTI1_IRQHandler+0x1c>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <EXTI1_IRQHandler+0x1c>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <EXTI1_IRQHandler+0x20>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4798      	blx	r3

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40010400 	.word	0x40010400
 8002144:	200000d0 	.word	0x200000d0

08002148 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<2);
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <EXTI2_IRQHandler+0x1c>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <EXTI2_IRQHandler+0x1c>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <EXTI2_IRQHandler+0x20>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4798      	blx	r3
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40010400 	.word	0x40010400
 8002168:	200000d0 	.word	0x200000d0

0800216c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<3);
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <EXTI3_IRQHandler+0x1c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <EXTI3_IRQHandler+0x1c>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <EXTI3_IRQHandler+0x20>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4798      	blx	r3
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40010400 	.word	0x40010400
 800218c:	200000d0 	.word	0x200000d0

08002190 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	EXIT->EXTI_PR |= (1<<4);
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <EXTI4_IRQHandler+0x1c>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <EXTI4_IRQHandler+0x1c>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <EXTI4_IRQHandler+0x20>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4798      	blx	r3
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40010400 	.word	0x40010400
 80021b0:	200000d0 	.word	0x200000d0

080021b4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<5)) {EXIT->EXTI_PR |= (1<<5); GP_IRQ_Callback[5]();  }
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <EXTI9_5_IRQHandler+0x22>
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	6153      	str	r3, [r2, #20]
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <EXTI9_5_IRQHandler+0xa4>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<6)) {EXIT->EXTI_PR |= (1<<6); GP_IRQ_Callback[6]();  }
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <EXTI9_5_IRQHandler+0x40>
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ec:	6153      	str	r3, [r2, #20]
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <EXTI9_5_IRQHandler+0xa4>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<7)) {EXIT->EXTI_PR |= (1<<7); GP_IRQ_Callback[7]();  }
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <EXTI9_5_IRQHandler+0x5e>
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	6153      	str	r3, [r2, #20]
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <EXTI9_5_IRQHandler+0xa4>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<8)) {EXIT->EXTI_PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <EXTI9_5_IRQHandler+0x7c>
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6153      	str	r3, [r2, #20]
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <EXTI9_5_IRQHandler+0xa4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<9)) {EXIT->EXTI_PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <EXTI9_5_IRQHandler+0x9a>
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <EXTI9_5_IRQHandler+0xa0>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002246:	6153      	str	r3, [r2, #20]
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <EXTI9_5_IRQHandler+0xa4>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	4798      	blx	r3
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40010400 	.word	0x40010400
 8002258:	200000d0 	.word	0x200000d0

0800225c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	if(EXIT->EXTI_PR & (1<<10)) {EXIT->EXTI_PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <EXTI15_10_IRQHandler+0x22>
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6153      	str	r3, [r2, #20]
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<11)) {EXIT->EXTI_PR |= (1<<11); GP_IRQ_Callback[11]();  }
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <EXTI15_10_IRQHandler+0x40>
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002294:	6153      	str	r3, [r2, #20]
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<12)) {EXIT->EXTI_PR |= (1<<12); GP_IRQ_Callback[12]();  }
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <EXTI15_10_IRQHandler+0x5e>
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b2:	6153      	str	r3, [r2, #20]
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<13)) {EXIT->EXTI_PR |= (1<<13); GP_IRQ_Callback[13]();  }
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <EXTI15_10_IRQHandler+0x7c>
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022d0:	6153      	str	r3, [r2, #20]
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<14)) {EXIT->EXTI_PR |= (1<<14); GP_IRQ_Callback[14]();  }
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <EXTI15_10_IRQHandler+0x9a>
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ee:	6153      	str	r3, [r2, #20]
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	4798      	blx	r3
	if(EXIT->EXTI_PR & (1<<15)) {EXIT->EXTI_PR |= (1<<15); GP_IRQ_Callback[15]();  }
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <EXTI15_10_IRQHandler+0xb8>
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <EXTI15_10_IRQHandler+0xbc>)
 8002308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230c:	6153      	str	r3, [r2, #20]
 800230e:	4b03      	ldr	r3, [pc, #12]	; (800231c <EXTI15_10_IRQHandler+0xc0>)
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	4798      	blx	r3

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010400 	.word	0x40010400
 800231c:	200000d0 	.word	0x200000d0

08002320 <SPI1_IRQHandler>:
	while( (((SPIx->SPI_SR)>>7)&1) );
	pinwrite(gpiox_SS, pin, HIGH);
}


void SPI1_IRQHandler(){
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	//slave only todo
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <USART_INIT>:
//===============================================================
void send_string (){

}
//===============================================================
void USART_INIT(USART_typeDef* USARTx,uint32_t mode,uint32_t word_length,uint32_t stop_bits,uint32_t baud_rate,uint32_t parity,uint32_t CLCK){
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]

	if(USARTx ==USART1){
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a55      	ldr	r2, [pc, #340]	; (80024a0 <USART_INIT+0x168>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d11f      	bne.n	800238e <USART_INIT+0x56>
		USART1_Clock_Enable();
 800234e:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <USART_INIT+0x16c>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <USART_INIT+0x16c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6193      	str	r3, [r2, #24]
		GPIOA_Clock_Enable();
 800235a:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <USART_INIT+0x16c>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <USART_INIT+0x16c>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6193      	str	r3, [r2, #24]
		NVIC_USART1_interrupt_Enable;
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <USART_INIT+0x170>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <USART_INIT+0x170>)
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin9,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 8002372:	2209      	movs	r2, #9
 8002374:	2109      	movs	r1, #9
 8002376:	484d      	ldr	r0, [pc, #308]	; (80024ac <USART_INIT+0x174>)
 8002378:	f7fe fa70 	bl	800085c <pinmode>
		//RX
		pinmode(GPIOA, pin10,GPIO_MODE_INTPUT_AF);
 800237c:	2204      	movs	r2, #4
 800237e:	210a      	movs	r1, #10
 8002380:	484a      	ldr	r0, [pc, #296]	; (80024ac <USART_INIT+0x174>)
 8002382:	f7fe fa6b 	bl	800085c <pinmode>
		arr[0]=USART1;
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <USART_INIT+0x178>)
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <USART_INIT+0x168>)
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e042      	b.n	8002414 <USART_INIT+0xdc>
	}
	else if(USARTx ==USART2){
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <USART_INIT+0x17c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d11f      	bne.n	80023d6 <USART_INIT+0x9e>
		USART2_Clock_Enable();
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <USART_INIT+0x16c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a42      	ldr	r2, [pc, #264]	; (80024a4 <USART_INIT+0x16c>)
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	61d3      	str	r3, [r2, #28]
		GPIOA_Clock_Enable();
 80023a2:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <USART_INIT+0x16c>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <USART_INIT+0x16c>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6193      	str	r3, [r2, #24]
		NVIC_USART2_interrupt_Enable;
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <USART_INIT+0x170>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <USART_INIT+0x170>)
 80023b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b8:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOA, pin2,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80023ba:	2209      	movs	r2, #9
 80023bc:	2102      	movs	r1, #2
 80023be:	483b      	ldr	r0, [pc, #236]	; (80024ac <USART_INIT+0x174>)
 80023c0:	f7fe fa4c 	bl	800085c <pinmode>
		//RX
		pinmode(GPIOA, pin3,GPIO_MODE_INTPUT_AF);
 80023c4:	2204      	movs	r2, #4
 80023c6:	2103      	movs	r1, #3
 80023c8:	4838      	ldr	r0, [pc, #224]	; (80024ac <USART_INIT+0x174>)
 80023ca:	f7fe fa47 	bl	800085c <pinmode>
		arr[1]=USART2;
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <USART_INIT+0x178>)
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <USART_INIT+0x17c>)
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	e01e      	b.n	8002414 <USART_INIT+0xdc>
	}
	else{
		USART3_Clock_Enable();
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <USART_INIT+0x16c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a32      	ldr	r2, [pc, #200]	; (80024a4 <USART_INIT+0x16c>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	61d3      	str	r3, [r2, #28]
		GPIOB_Clock_Enable();
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <USART_INIT+0x16c>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <USART_INIT+0x16c>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6193      	str	r3, [r2, #24]
		NVIC_USART3_interrupt_Enable;
 80023ee:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <USART_INIT+0x170>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	; (80024a8 <USART_INIT+0x170>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	6013      	str	r3, [r2, #0]
		//TX
		pinmode(GPIOB, pin10,GPIO_MODE_OUTPUT_AF_push_pull_Speed10);
 80023fa:	2209      	movs	r2, #9
 80023fc:	210a      	movs	r1, #10
 80023fe:	482e      	ldr	r0, [pc, #184]	; (80024b8 <USART_INIT+0x180>)
 8002400:	f7fe fa2c 	bl	800085c <pinmode>
		//RX
		pinmode(GPIOB, pin11,GPIO_MODE_INTPUT_AF);
 8002404:	2204      	movs	r2, #4
 8002406:	210b      	movs	r1, #11
 8002408:	482b      	ldr	r0, [pc, #172]	; (80024b8 <USART_INIT+0x180>)
 800240a:	f7fe fa27 	bl	800085c <pinmode>
		arr[2]=USART3;
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <USART_INIT+0x178>)
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <USART_INIT+0x184>)
 8002412:	609a      	str	r2, [r3, #8]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enabled
	USARTx->USART_CR1 |=(1<<13);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	60da      	str	r2, [r3, #12]
	//STEP 2
	//	Bit 12 M: Word length
	//	This bit determines the word length. It is set or cleared by software.
	//	0: 1 Start bit, 8 Data bits, n Stop bit
	//	1: 1 Start bit, 9 Data bits, n Stop bit
	USARTx->USART_CR1 |=word_length;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	60da      	str	r2, [r3, #12]
	//	These bits are used for programming the stop bits.
	//	00: 1 Stop bit
	//	01: 0.5 Stop bit
	//	10: 2 Stop bits
	//	11: 1.5 Stop bit
	USARTx->USART_CR2 |=stop_bits;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	431a      	orrs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	611a      	str	r2, [r3, #16]
	//	2: When TE is set there is a 1 bit-time delay before the transmission starts.
	//	Bit 2 RE: Receiver enable
	//	This bit enables the receiver. It is set and cleared by software.
	//	0: Receiver is disabled
	//	1: Receiver is enabled and begins searching for a start bit
	USARTx->USART_CR1 |=mode;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	431a      	orrs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	60da      	str	r2, [r3, #12]
	//	Bit 9 PS: Parity selection
	//	This bit selects the odd or even parity when the parity generation/detection is enabled (PCE
	//	bit set). It is set and cleared by software. The parity will be selected after the current byte.
	//	0: Even parity
	//	1: Odd parity
	USARTx->USART_CR1 |=parity;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	60da      	str	r2, [r3, #12]
	//	Bits 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV
	//	These 12 bits define the mantissa of the USART Divider (USARTDIV)
	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV
	//	These 4 bits define the fraction of the USART Divider (USARTDIV)

	uint16_t DIV_Mantissa =CLCK /(baud_rate*16);
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	82fb      	strh	r3, [r7, #22]
	uint16_t DIV_Fraction =(((CLCK /((baud_rate*16)/100)) - DIV_Mantissa*100)*16)/100;
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <USART_INIT+0x188>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	8afa      	ldrh	r2, [r7, #22]
 8002470:	2164      	movs	r1, #100	; 0x64
 8002472:	fb01 f202 	mul.w	r2, r1, r2
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <USART_INIT+0x188>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	82bb      	strh	r3, [r7, #20]
	USARTx->USART_BRR =( (DIV_Mantissa<<4) | ((DIV_Fraction)& 0xf) );
 8002484:	8afb      	ldrh	r3, [r7, #22]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	8abb      	ldrh	r3, [r7, #20]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	4313      	orrs	r3, r2
 8002490:	461a      	mov	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	609a      	str	r2, [r3, #8]


}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	e000e104 	.word	0xe000e104
 80024ac:	40010800 	.word	0x40010800
 80024b0:	2000010c 	.word	0x2000010c
 80024b4:	40004400 	.word	0x40004400
 80024b8:	40010c00 	.word	0x40010c00
 80024bc:	40004800 	.word	0x40004800
 80024c0:	51eb851f 	.word	0x51eb851f

080024c4 <USART_SEND>:
void USART_SEND(USART_typeDef* USARTx,uint16_t* data){
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]

	if(((USARTx->USART_CR1>>12)&1)==1){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0b1b      	lsrs	r3, r3, #12
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <USART_SEND+0x26>
		//	Bit 12 M: Word length
		//	1: 1 Start bit, 9 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0x01ff);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	605a      	str	r2, [r3, #4]
		//	0: 1 Start bit, 8 Data bits, n Stop bit
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
	}


}
 80024e8:	e004      	b.n	80024f4 <USART_SEND+0x30>
		USARTx->USART_DR=((*data)&(uint16_t)0xff);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <USART_SEND_STRING>:
		*data=arr_data_RES[2];
	}

}

void USART_SEND_STRING(USART_typeDef* USARTx,uint8_t* data){
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]

	if(USARTx==USART1){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <USART_SEND_STRING+0x5c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d105      	bne.n	800251e <USART_SEND_STRING+0x1e>
		arr_data[0]=data;
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <USART_SEND_STRING+0x60>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6013      	str	r3, [r2, #0]
		arr[0]=USART1;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <USART_SEND_STRING+0x64>)
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <USART_SEND_STRING+0x5c>)
 800251c:	601a      	str	r2, [r3, #0]
	}
	if(USARTx==USART2){
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <USART_SEND_STRING+0x68>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d105      	bne.n	8002532 <USART_SEND_STRING+0x32>
		arr_data[1]=data;
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <USART_SEND_STRING+0x60>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6053      	str	r3, [r2, #4]
		arr[1]=USART2;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <USART_SEND_STRING+0x64>)
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <USART_SEND_STRING+0x68>)
 8002530:	605a      	str	r2, [r3, #4]
	}
	if(USARTx==USART3){
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <USART_SEND_STRING+0x6c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d105      	bne.n	8002546 <USART_SEND_STRING+0x46>
		arr_data[2]=data;
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <USART_SEND_STRING+0x60>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6093      	str	r3, [r2, #8]
		arr[2]=USART3;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <USART_SEND_STRING+0x64>)
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <USART_SEND_STRING+0x6c>)
 8002544:	609a      	str	r2, [r3, #8]
	}
	//Bit 7 TXEIE: TXE interrupt enable
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
	USARTx->USART_CR1 |=Transmit_data_register_empty;//open flage of interrupt
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60da      	str	r2, [r3, #12]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40013800 	.word	0x40013800
 8002560:	20000120 	.word	0x20000120
 8002564:	2000010c 	.word	0x2000010c
 8002568:	40004400 	.word	0x40004400
 800256c:	40004800 	.word	0x40004800

08002570 <USART1_IRQHandler>:
	//This bit is set and cleared by software.
	//0: Interrupt is inhibited
	//1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR register
	USARTx->USART_CR1 &=~Received_data_ready_to_be_read;
}
void USART1_IRQHandler(){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
	////pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[0]->USART_SR>>7) & 1) ==1)&&(((arr[0]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 8002576:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <USART1_IRQHandler+0x160>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	09db      	lsrs	r3, r3, #7
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d122      	bne.n	80025cc <USART1_IRQHandler+0x5c>
 8002586:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <USART1_IRQHandler+0x160>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	09db      	lsrs	r3, r3, #7
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d11a      	bne.n	80025cc <USART1_IRQHandler+0x5c>

		if((*arr_data[0])!=0){
 8002596:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <USART1_IRQHandler+0x164>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <USART1_IRQHandler+0x4c>
			USART_SEND(arr[0],(uint16_t*)arr_data[0]);
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <USART1_IRQHandler+0x164>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f7ff ff8a 	bl	80024c4 <USART_SEND>
			++arr_data[0];
 80025b0:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <USART1_IRQHandler+0x164>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <USART1_IRQHandler+0x164>)
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e007      	b.n	80025cc <USART1_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[0]->USART_CR1 &=~Transmit_data_register_empty;
 80025bc:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ca:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[0]->USART_SR>>5) & 1) ==1)&&(( (arr[0]->USART_CR1 >>5) &1)==1) ){
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d166      	bne.n	80026aa <USART1_IRQHandler+0x13a>
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d15e      	bne.n	80026aa <USART1_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[0]->USART_CR1>>12)&1) ==1){
 80025ec:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0b1b      	lsrs	r3, r3, #12
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d117      	bne.n	800262c <USART1_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 80025fc:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <USART1_IRQHandler+0x160>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <USART1_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <USART1_IRQHandler+0x160>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	b29b      	uxth	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <USART1_IRQHandler+0x168>)
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	e020      	b.n	8002660 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0]=arr[0]->USART_DR;
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <USART1_IRQHandler+0x160>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <USART1_IRQHandler+0x168>)
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	e019      	b.n	8002660 <USART1_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[0]->USART_CR1>>10)&1) ==1){
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <USART1_IRQHandler+0x160>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d109      	bne.n	8002650 <USART1_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0x7f);
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <USART1_IRQHandler+0x160>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <USART1_IRQHandler+0x168>)
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	e007      	b.n	8002660 <USART1_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[0] =(arr[0]->USART_DR & (uint16_t)0xff);
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <USART1_IRQHandler+0x160>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	b29b      	uxth	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <USART1_IRQHandler+0x168>)
 800265e:	801a      	strh	r2, [r3, #0]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[0]();
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <USART1_IRQHandler+0x16c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4798      	blx	r3

		for(long i=0;i<(20000);i++);
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	e002      	b.n	8002672 <USART1_IRQHandler+0x102>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002678:	4293      	cmp	r3, r2
 800267a:	ddf7      	ble.n	800266c <USART1_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[0]->USART_SR &=~(1<<5);//clear
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <USART1_IRQHandler+0x160>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <USART1_IRQHandler+0x160>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0220 	bic.w	r2, r2, #32
 800268a:	601a      	str	r2, [r3, #0]
		//arr[0]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[0]->USART_SR>>3)&1)|1){
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <USART1_IRQHandler+0x160>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d=USART1->USART_DR;
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <USART1_IRQHandler+0x170>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b29b      	uxth	r3, r3
 8002698:	807b      	strh	r3, [r7, #2]
			arr[0]->USART_SR &=~(1<<5);
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <USART1_IRQHandler+0x160>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <USART1_IRQHandler+0x160>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0220 	bic.w	r2, r2, #32
 80026a8:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[0]->USART_SR>>3)&1)|1){
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <USART1_IRQHandler+0x160>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART1->USART_DR;
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <USART1_IRQHandler+0x170>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	803b      	strh	r3, [r7, #0]
		arr[0]->USART_SR &=~(1<<5);
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <USART1_IRQHandler+0x160>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <USART1_IRQHandler+0x160>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0220 	bic.w	r2, r2, #32
 80026c6:	601a      	str	r2, [r3, #0]
	}
	//_delay_ms(500);
	////pinwrite(GPIOB, pin1,LOW);
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000010c 	.word	0x2000010c
 80026d4:	20000120 	.word	0x20000120
 80026d8:	20000118 	.word	0x20000118
 80026dc:	2000012c 	.word	0x2000012c
 80026e0:	40013800 	.word	0x40013800

080026e4 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[0]->USART_SR &=~(1<<6);
	if(  (( (arr[1]->USART_SR>>7) & 1) ==1)&&(((arr[1]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <USART2_IRQHandler+0x160>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	09db      	lsrs	r3, r3, #7
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d122      	bne.n	8002740 <USART2_IRQHandler+0x5c>
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <USART2_IRQHandler+0x160>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	09db      	lsrs	r3, r3, #7
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d11a      	bne.n	8002740 <USART2_IRQHandler+0x5c>

		if((*arr_data[1])!=0){
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <USART2_IRQHandler+0x164>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <USART2_IRQHandler+0x4c>
			USART_SEND(arr[1],(uint16_t*)arr_data[1]);
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <USART2_IRQHandler+0x160>)
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <USART2_IRQHandler+0x164>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7ff fed0 	bl	80024c4 <USART_SEND>
			++arr_data[1];
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <USART2_IRQHandler+0x164>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	3301      	adds	r3, #1
 800272a:	4a47      	ldr	r2, [pc, #284]	; (8002848 <USART2_IRQHandler+0x164>)
 800272c:	6053      	str	r3, [r2, #4]
 800272e:	e007      	b.n	8002740 <USART2_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[1]->USART_CR1 &=~Transmit_data_register_empty;
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <USART2_IRQHandler+0x160>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <USART2_IRQHandler+0x160>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[1]->USART_SR>>5) & 1) ==1)&&(( (arr[1]->USART_CR1 >>5) &1)==1) ){
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <USART2_IRQHandler+0x160>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d166      	bne.n	800281e <USART2_IRQHandler+0x13a>
 8002750:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <USART2_IRQHandler+0x160>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d15e      	bne.n	800281e <USART2_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[1]->USART_CR1>>12)&1) ==1){
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <USART2_IRQHandler+0x160>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0b1b      	lsrs	r3, r3, #12
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d117      	bne.n	80027a0 <USART2_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <USART2_IRQHandler+0x160>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <USART2_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <USART2_IRQHandler+0x160>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b29b      	uxth	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <USART2_IRQHandler+0x168>)
 800278e:	805a      	strh	r2, [r3, #2]
 8002790:	e020      	b.n	80027d4 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1]=arr[1]->USART_DR;
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <USART2_IRQHandler+0x160>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b2c      	ldr	r3, [pc, #176]	; (800284c <USART2_IRQHandler+0x168>)
 800279c:	805a      	strh	r2, [r3, #2]
 800279e:	e019      	b.n	80027d4 <USART2_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[1]->USART_CR1>>10)&1) ==1){
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <USART2_IRQHandler+0x160>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d109      	bne.n	80027c4 <USART2_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0x7f);
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <USART2_IRQHandler+0x160>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <USART2_IRQHandler+0x168>)
 80027c0:	805a      	strh	r2, [r3, #2]
 80027c2:	e007      	b.n	80027d4 <USART2_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[1] =(arr[1]->USART_DR & (uint16_t)0xff);
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <USART2_IRQHandler+0x160>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <USART2_IRQHandler+0x168>)
 80027d2:	805a      	strh	r2, [r3, #2]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[1]();
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <USART2_IRQHandler+0x16c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	e002      	b.n	80027e6 <USART2_IRQHandler+0x102>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3301      	adds	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027ec:	4293      	cmp	r3, r2
 80027ee:	ddf7      	ble.n	80027e0 <USART2_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[1]->USART_SR &=~(1<<5);//clear
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <USART2_IRQHandler+0x160>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <USART2_IRQHandler+0x160>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f022 0220 	bic.w	r2, r2, #32
 80027fe:	601a      	str	r2, [r3, #0]
		//arr[1]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[1]->USART_SR>>3)&1)|1){
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <USART2_IRQHandler+0x160>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART2->USART_DR;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <USART2_IRQHandler+0x170>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b29b      	uxth	r3, r3
 800280c:	807b      	strh	r3, [r7, #2]
			arr[1]->USART_SR &=~(1<<5);
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <USART2_IRQHandler+0x160>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <USART2_IRQHandler+0x160>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f022 0220 	bic.w	r2, r2, #32
 800281c:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[1]->USART_SR>>3)&1)|1){
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <USART2_IRQHandler+0x160>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART2->USART_DR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <USART2_IRQHandler+0x170>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b29b      	uxth	r3, r3
 800282a:	803b      	strh	r3, [r7, #0]
		arr[1]->USART_SR &=~(1<<5);
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <USART2_IRQHandler+0x160>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <USART2_IRQHandler+0x160>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f022 0220 	bic.w	r2, r2, #32
 800283a:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000010c 	.word	0x2000010c
 8002848:	20000120 	.word	0x20000120
 800284c:	20000118 	.word	0x20000118
 8002850:	2000012c 	.word	0x2000012c
 8002854:	40004400 	.word	0x40004400

08002858 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	//pinwrite(GPIOB, pin1,HIGH);
	//arr[2]->USART_SR &=~(1<<6);
	if(  (( (arr[2]->USART_SR>>7) & 1) ==1)&&(((arr[2]->USART_CR1 >>7)&1)==1) ){   //Transmit data register empty
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	09db      	lsrs	r3, r3, #7
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d122      	bne.n	80028b4 <USART3_IRQHandler+0x5c>
 800286e:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	09db      	lsrs	r3, r3, #7
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d11a      	bne.n	80028b4 <USART3_IRQHandler+0x5c>

		if((*arr_data[2])!=0){
 800287e:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <USART3_IRQHandler+0x164>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <USART3_IRQHandler+0x4c>
			USART_SEND(arr[2],(uint16_t*)arr_data[2]);
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <USART3_IRQHandler+0x160>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <USART3_IRQHandler+0x164>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7ff fe16 	bl	80024c4 <USART_SEND>
			++arr_data[2];
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <USART3_IRQHandler+0x164>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	3301      	adds	r3, #1
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <USART3_IRQHandler+0x164>)
 80028a0:	6093      	str	r3, [r2, #8]
 80028a2:	e007      	b.n	80028b4 <USART3_IRQHandler+0x5c>
		else {
			//Bit 7 TXEIE: TXE interrupt enable
			//This bit is set and cleared by software.
			//0: Interrupt is inhibited
			//1: A USART interrupt is generated whenever TXE=1 in the USART_SR register
			arr[2]->USART_CR1 &=~Transmit_data_register_empty;
 80028a4:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b2:	60da      	str	r2, [r3, #12]

	}

	//===========================================================================

	if(  (( (arr[2]->USART_SR>>5) & 1) ==1)&&(( (arr[2]->USART_CR1 >>5) &1)==1) ){
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d166      	bne.n	8002992 <USART3_IRQHandler+0x13a>
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d15e      	bne.n	8002992 <USART3_IRQHandler+0x13a>



		//	Bit 12 M: Word length
		//	This bit determines the word length. It is set or cleared by software.
		if(((arr[2]->USART_CR1>>12)&1) ==1){
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0b1b      	lsrs	r3, r3, #12
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d117      	bne.n	8002914 <USART3_IRQHandler+0xbc>
			//	1: 1 Start bit, 9 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <USART3_IRQHandler+0xae>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <USART3_IRQHandler+0x160>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <USART3_IRQHandler+0x168>)
 8002902:	809a      	strh	r2, [r3, #4]
 8002904:	e020      	b.n	8002948 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2]=arr[2]->USART_DR;
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <USART3_IRQHandler+0x168>)
 8002910:	809a      	strh	r2, [r3, #4]
 8002912:	e019      	b.n	8002948 <USART3_IRQHandler+0xf0>
			}
		}
		else{
			//	0: 1 Start bit, 8 Data bits, n Stop bit

			if(((arr[2]->USART_CR1>>10)&1) ==1){
 8002914:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0a9b      	lsrs	r3, r3, #10
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d109      	bne.n	8002938 <USART3_IRQHandler+0xe0>
				//Bit 10 PCE: Parity control enable
				// 1: Parity control enabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0x7f);
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <USART3_IRQHandler+0x168>)
 8002934:	809a      	strh	r2, [r3, #4]
 8002936:	e007      	b.n	8002948 <USART3_IRQHandler+0xf0>
			}
			else{
				//0: Parity control disabled
				arr_data_RES[2] =(arr[2]->USART_DR & (uint16_t)0xff);
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <USART3_IRQHandler+0x160>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <USART3_IRQHandler+0x168>)
 8002946:	809a      	strh	r2, [r3, #4]
			}
		}
		//pinwrite(GPIOB, pin1,HIGH);

		GP_reseve_Callback[2]();
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <USART3_IRQHandler+0x16c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4798      	blx	r3
		for(long i=0;i<(20000);i++);
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	e002      	b.n	800295a <USART3_IRQHandler+0x102>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002960:	4293      	cmp	r3, r2
 8002962:	ddf7      	ble.n	8002954 <USART3_IRQHandler+0xfc>
		//pinwrite(GPIOB, pin1,LOW);
		arr[2]->USART_SR &=~(1<<5);//clear
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <USART3_IRQHandler+0x160>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	601a      	str	r2, [r3, #0]
		//arr[2]->USART_CR1 &=~Received_data_ready_to_be_read;
		if(((arr[2]->USART_SR>>3)&1)|1){
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	681b      	ldr	r3, [r3, #0]
			volatile uint16_t d =USART3->USART_DR;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <USART3_IRQHandler+0x170>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b29b      	uxth	r3, r3
 8002980:	807b      	strh	r3, [r7, #2]
			arr[2]->USART_SR &=~(1<<5);
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <USART3_IRQHandler+0x160>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f022 0220 	bic.w	r2, r2, #32
 8002990:	601a      	str	r2, [r3, #0]
		}
	}
	if(((arr[2]->USART_SR>>3)&1)|1){
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <USART3_IRQHandler+0x160>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	681b      	ldr	r3, [r3, #0]
		volatile uint16_t w =USART3->USART_DR;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <USART3_IRQHandler+0x170>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	b29b      	uxth	r3, r3
 800299e:	803b      	strh	r3, [r7, #0]
		arr[2]->USART_SR &=~(1<<5);
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <USART3_IRQHandler+0x160>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <USART3_IRQHandler+0x160>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f022 0220 	bic.w	r2, r2, #32
 80029ae:	601a      	str	r2, [r3, #0]
	}
	//	_delay_ms(500);
	//	pinwrite(GPIOB, pin1,LOW);
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000010c 	.word	0x2000010c
 80029bc:	20000120 	.word	0x20000120
 80029c0:	20000118 	.word	0x20000118
 80029c4:	2000012c 	.word	0x2000012c
 80029c8:	40004800 	.word	0x40004800

080029cc <main>:




int main(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af04      	add	r7, sp, #16
	//*******************************************************
	//===================== INIT ===========================
	//*******************************************************
	MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);//speed of CPU to 36MHz
 80029d2:	2100      	movs	r1, #0
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fe3d 	bl	8001654 <MCAL_speed_init>
	ADC_INIT(ADC1, ADC_STATE_START);// init ADC
 80029da:	2101      	movs	r1, #1
 80029dc:	484a      	ldr	r0, [pc, #296]	; (8002b08 <main+0x13c>)
 80029de:	f7fe fec5 	bl	800176c <ADC_INIT>
	USART_INIT(USART1, mode_RX_TX_ENABLE, word_length_8, stop_bits_1, baud_rate_9600, parity_none,clk);
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <main+0x140>)
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	210c      	movs	r1, #12
 80029f6:	4846      	ldr	r0, [pc, #280]	; (8002b10 <main+0x144>)
 80029f8:	f7ff fc9e 	bl	8002338 <USART_INIT>
	EXTI(GPIOA,pin4,EXTI_Trigger_Rising,intA);// INIT external interrupt to encoder
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <main+0x148>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	2104      	movs	r1, #4
 8002a02:	4845      	ldr	r0, [pc, #276]	; (8002b18 <main+0x14c>)
 8002a04:	f7fe ff76 	bl	80018f4 <EXTI>
	//===================== WHILE ===========================
	//*******************************************************

	while(1){

		pid_read=PID(4000,X);
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <main+0x150>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002a12:	f000 f88f 	bl	8002b34 <PID>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fc63 	bl	80002e4 <__aeabi_i2f>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <main+0x154>)
 8002a22:	601a      	str	r2, [r3, #0]
		if(pid_read>=2){
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <main+0x154>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fe5f 	bl	80006f0 <__aeabi_fcmpge>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d017      	beq.n	8002a68 <main+0x9c>
			PWM(TIM1, CH_3,pid_read,3500, clk);
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <main+0x154>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fe91 	bl	8000764 <__aeabi_f2uiz>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <main+0x140>)
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	4835      	ldr	r0, [pc, #212]	; (8002b24 <main+0x158>)
 8002a50:	f7fd fffa 	bl	8000a48 <PWM>
			PWM(TIM1, CH_1,0,3500, clk);
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <main+0x140>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4830      	ldr	r0, [pc, #192]	; (8002b24 <main+0x158>)
 8002a62:	f7fd fff1 	bl	8000a48 <PWM>
 8002a66:	e035      	b.n	8002ad4 <main+0x108>
		}
		else if(pid_read<=-2){
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <main+0x154>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fe33 	bl	80006dc <__aeabi_fcmple>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d019      	beq.n	8002ab0 <main+0xe4>
			PWM(TIM1, CH_1,-pid_read,3500, clk);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <main+0x154>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fe6d 	bl	8000764 <__aeabi_f2uiz>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <main+0x140>)
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002a94:	2101      	movs	r1, #1
 8002a96:	4823      	ldr	r0, [pc, #140]	; (8002b24 <main+0x158>)
 8002a98:	f7fd ffd6 	bl	8000a48 <PWM>
			PWM(TIM1, CH_3,0,3500, clk);
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <main+0x140>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	481e      	ldr	r0, [pc, #120]	; (8002b24 <main+0x158>)
 8002aaa:	f7fd ffcd 	bl	8000a48 <PWM>
 8002aae:	e011      	b.n	8002ad4 <main+0x108>
		}
		else{
			PWM(TIM1, CH_1,0,3500, clk);
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <main+0x140>)
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2101      	movs	r1, #1
 8002abc:	4819      	ldr	r0, [pc, #100]	; (8002b24 <main+0x158>)
 8002abe:	f7fd ffc3 	bl	8000a48 <PWM>
			PWM(TIM1, CH_3,0,3500, clk);
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <main+0x140>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002aca:	2200      	movs	r2, #0
 8002acc:	2103      	movs	r1, #3
 8002ace:	4815      	ldr	r0, [pc, #84]	; (8002b24 <main+0x158>)
 8002ad0:	f7fd ffba 	bl	8000a48 <PWM>
		}

		USART_SEND_STRING(USART1,"\n ");
 8002ad4:	4914      	ldr	r1, [pc, #80]	; (8002b28 <main+0x15c>)
 8002ad6:	480e      	ldr	r0, [pc, #56]	; (8002b10 <main+0x144>)
 8002ad8:	f7ff fd12 	bl	8002500 <USART_SEND_STRING>
		delay(4, U_ms, clk);
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <main+0x140>)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2004      	movs	r0, #4
 8002ae2:	f7fe fb3f 	bl	8001164 <delay>
		sprintf(text,"%d",X);
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <main+0x150>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	490f      	ldr	r1, [pc, #60]	; (8002b2c <main+0x160>)
 8002aee:	4810      	ldr	r0, [pc, #64]	; (8002b30 <main+0x164>)
 8002af0:	f000 f944 	bl	8002d7c <siprintf>
		USART_SEND_STRING(USART1,text);
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <main+0x164>)
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <main+0x144>)
 8002af8:	f7ff fd02 	bl	8002500 <USART_SEND_STRING>
		delay(14, U_ms, clk);
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <main+0x140>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	200e      	movs	r0, #14
 8002b02:	f7fe fb2f 	bl	8001164 <delay>
		pid_read=PID(4000,X);
 8002b06:	e77f      	b.n	8002a08 <main+0x3c>
 8002b08:	40012400 	.word	0x40012400
 8002b0c:	02255100 	.word	0x02255100
 8002b10:	40013800 	.word	0x40013800
 8002b14:	08002c29 	.word	0x08002c29
 8002b18:	40010800 	.word	0x40010800
 8002b1c:	200000ac 	.word	0x200000ac
 8002b20:	2000014c 	.word	0x2000014c
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	080035b8 	.word	0x080035b8
 8002b2c:	080035bc 	.word	0x080035bc
 8002b30:	200000b0 	.word	0x200000b0

08002b34 <PID>:
}

//*******************************************************
//===================== -PID- ===========================
//*******************************************************
int PID (int target_position,int actual_position){
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]

	error = target_position - actual_position;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fbcd 	bl	80002e4 <__aeabi_i2f>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <PID+0xd8>)
 8002b4e:	601a      	str	r2, [r3, #0]
	pid_d =error - prev_error;
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <PID+0xd8>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <PID+0xdc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fd fb0c 	bl	8000178 <__aeabi_fsub>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <PID+0xe0>)
 8002b66:	601a      	str	r2, [r3, #0]
	integral+=error;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <PID+0xe4>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <PID+0xd8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7fd fb02 	bl	800017c <__addsf3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <PID+0xe4>)
 8002b7e:	601a      	str	r2, [r3, #0]
	pid_res =error * kp + pid_d * kd+integral*ki;
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <PID+0xd8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <PID+0xe8>)
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fbff 	bl	800038c <__aeabi_fmul>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461c      	mov	r4, r3
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <PID+0xe0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <PID+0xe8>)
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fbf6 	bl	800038c <__aeabi_fmul>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7fd fae9 	bl	800017c <__addsf3>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461c      	mov	r4, r3
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <PID+0xe4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fbe7 	bl	800038c <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7fd fada 	bl	800017c <__addsf3>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fda4 	bl	8000718 <__aeabi_f2iz>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <PID+0xec>)
 8002bd4:	601a      	str	r2, [r3, #0]

	if(pid_res<-max_speed){
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <PID+0xec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8002bde:	da02      	bge.n	8002be6 <PID+0xb2>
		pid_res=-max_speed;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <PID+0xec>)
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <PID+0xf0>)
 8002be4:	601a      	str	r2, [r3, #0]
	}

	if(pid_res>max_speed){
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <PID+0xec>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002bee:	dd03      	ble.n	8002bf8 <PID+0xc4>
		pid_res=max_speed;
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <PID+0xec>)
 8002bf2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002bf6:	601a      	str	r2, [r3, #0]
	}

	prev_error=error;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <PID+0xd8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <PID+0xdc>)
 8002bfe:	6013      	str	r3, [r2, #0]
	return pid_res ;
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <PID+0xec>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	20000150 	.word	0x20000150
 8002c10:	20000154 	.word	0x20000154
 8002c14:	20000144 	.word	0x20000144
 8002c18:	20000158 	.word	0x20000158
 8002c1c:	40400000 	.word	0x40400000
 8002c20:	20000148 	.word	0x20000148
 8002c24:	fffffc7c 	.word	0xfffffc7c

08002c28 <intA>:


//*******************************************************
//===================== encoder ISR =====================
//*******************************************************
void intA(){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
	int b = READ_PIN(GPIOA, pin5);
 8002c2e:	2105      	movs	r1, #5
 8002c30:	480b      	ldr	r0, [pc, #44]	; (8002c60 <intA+0x38>)
 8002c32:	f7fd fef5 	bl	8000a20 <READ_PIN>
 8002c36:	4603      	mov	r3, r0
 8002c38:	607b      	str	r3, [r7, #4]
	if(b > 0){
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	dd05      	ble.n	8002c4c <intA+0x24>
		X++;
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <intA+0x3c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <intA+0x3c>)
 8002c48:	6013      	str	r3, [r2, #0]
	}
	else{
		X--;
	}
}
 8002c4a:	e004      	b.n	8002c56 <intA+0x2e>
		X--;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <intA+0x3c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <intA+0x3c>)
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40010800 	.word	0x40010800
 8002c64:	200000ac 	.word	0x200000ac

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f000 f846 	bl	8002d28 <__errno>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20005000 	.word	0x20005000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	200000b4 	.word	0x200000b4
 8002cd0:	20000168 	.word	0x20000168

08002cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cd6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cd8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <LoopForever+0xe>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf4:	4c0a      	ldr	r4, [pc, #40]	; (8002d20 <LoopForever+0x16>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d02:	f000 f817 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d06:	f7ff fe61 	bl	80029cc <main>

08002d0a <LoopForever>:

LoopForever:
    b LoopForever
 8002d0a:	e7fe      	b.n	8002d0a <LoopForever>
  ldr   r0, =_estack
 8002d0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d14:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002d18:	080035fc 	.word	0x080035fc
  ldr r2, =_sbss
 8002d1c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002d20:	20000164 	.word	0x20000164

08002d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC1_2_IRQHandler>
	...

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000020 	.word	0x20000020

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	2500      	movs	r5, #0
 8002d38:	4e0c      	ldr	r6, [pc, #48]	; (8002d6c <__libc_init_array+0x38>)
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <__libc_init_array+0x3c>)
 8002d3c:	1ba4      	subs	r4, r4, r6
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	42a5      	cmp	r5, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	f000 fc2c 	bl	80035a0 <_init>
 8002d48:	2500      	movs	r5, #0
 8002d4a:	4e0a      	ldr	r6, [pc, #40]	; (8002d74 <__libc_init_array+0x40>)
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <__libc_init_array+0x44>)
 8002d4e:	1ba4      	subs	r4, r4, r6
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	42a5      	cmp	r5, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d5c:	4798      	blx	r3
 8002d5e:	3501      	adds	r5, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d66:	4798      	blx	r3
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	080035f4 	.word	0x080035f4
 8002d70:	080035f4 	.word	0x080035f4
 8002d74:	080035f4 	.word	0x080035f4
 8002d78:	080035f8 	.word	0x080035f8

08002d7c <siprintf>:
 8002d7c:	b40e      	push	{r1, r2, r3}
 8002d7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d82:	b500      	push	{lr}
 8002d84:	b09c      	sub	sp, #112	; 0x70
 8002d86:	ab1d      	add	r3, sp, #116	; 0x74
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9006      	str	r0, [sp, #24]
 8002d8c:	9107      	str	r1, [sp, #28]
 8002d8e:	9104      	str	r1, [sp, #16]
 8002d90:	4808      	ldr	r0, [pc, #32]	; (8002db4 <siprintf+0x38>)
 8002d92:	4909      	ldr	r1, [pc, #36]	; (8002db8 <siprintf+0x3c>)
 8002d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d98:	9105      	str	r1, [sp, #20]
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	a902      	add	r1, sp, #8
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f000 f8e6 	bl	8002f70 <_svfiprintf_r>
 8002da4:	2200      	movs	r2, #0
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	b01c      	add	sp, #112	; 0x70
 8002dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002db0:	b003      	add	sp, #12
 8002db2:	4770      	bx	lr
 8002db4:	20000020 	.word	0x20000020
 8002db8:	ffff0208 	.word	0xffff0208

08002dbc <_malloc_r>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	1ccd      	adds	r5, r1, #3
 8002dc0:	f025 0503 	bic.w	r5, r5, #3
 8002dc4:	3508      	adds	r5, #8
 8002dc6:	2d0c      	cmp	r5, #12
 8002dc8:	bf38      	it	cc
 8002dca:	250c      	movcc	r5, #12
 8002dcc:	2d00      	cmp	r5, #0
 8002dce:	4606      	mov	r6, r0
 8002dd0:	db01      	blt.n	8002dd6 <_malloc_r+0x1a>
 8002dd2:	42a9      	cmp	r1, r5
 8002dd4:	d903      	bls.n	8002dde <_malloc_r+0x22>
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	6033      	str	r3, [r6, #0]
 8002dda:	2000      	movs	r0, #0
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	f000 fb89 	bl	80034f4 <__malloc_lock>
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <_malloc_r+0xac>)
 8002de4:	6814      	ldr	r4, [r2, #0]
 8002de6:	4621      	mov	r1, r4
 8002de8:	b991      	cbnz	r1, 8002e10 <_malloc_r+0x54>
 8002dea:	4c20      	ldr	r4, [pc, #128]	; (8002e6c <_malloc_r+0xb0>)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	b91b      	cbnz	r3, 8002df8 <_malloc_r+0x3c>
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 fb3d 	bl	8003470 <_sbrk_r>
 8002df6:	6020      	str	r0, [r4, #0]
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f000 fb38 	bl	8003470 <_sbrk_r>
 8002e00:	1c43      	adds	r3, r0, #1
 8002e02:	d124      	bne.n	8002e4e <_malloc_r+0x92>
 8002e04:	230c      	movs	r3, #12
 8002e06:	4630      	mov	r0, r6
 8002e08:	6033      	str	r3, [r6, #0]
 8002e0a:	f000 fb74 	bl	80034f6 <__malloc_unlock>
 8002e0e:	e7e4      	b.n	8002dda <_malloc_r+0x1e>
 8002e10:	680b      	ldr	r3, [r1, #0]
 8002e12:	1b5b      	subs	r3, r3, r5
 8002e14:	d418      	bmi.n	8002e48 <_malloc_r+0x8c>
 8002e16:	2b0b      	cmp	r3, #11
 8002e18:	d90f      	bls.n	8002e3a <_malloc_r+0x7e>
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	18cc      	adds	r4, r1, r3
 8002e1e:	50cd      	str	r5, [r1, r3]
 8002e20:	4630      	mov	r0, r6
 8002e22:	f000 fb68 	bl	80034f6 <__malloc_unlock>
 8002e26:	f104 000b 	add.w	r0, r4, #11
 8002e2a:	1d23      	adds	r3, r4, #4
 8002e2c:	f020 0007 	bic.w	r0, r0, #7
 8002e30:	1ac3      	subs	r3, r0, r3
 8002e32:	d0d3      	beq.n	8002ddc <_malloc_r+0x20>
 8002e34:	425a      	negs	r2, r3
 8002e36:	50e2      	str	r2, [r4, r3]
 8002e38:	e7d0      	b.n	8002ddc <_malloc_r+0x20>
 8002e3a:	684b      	ldr	r3, [r1, #4]
 8002e3c:	428c      	cmp	r4, r1
 8002e3e:	bf16      	itet	ne
 8002e40:	6063      	strne	r3, [r4, #4]
 8002e42:	6013      	streq	r3, [r2, #0]
 8002e44:	460c      	movne	r4, r1
 8002e46:	e7eb      	b.n	8002e20 <_malloc_r+0x64>
 8002e48:	460c      	mov	r4, r1
 8002e4a:	6849      	ldr	r1, [r1, #4]
 8002e4c:	e7cc      	b.n	8002de8 <_malloc_r+0x2c>
 8002e4e:	1cc4      	adds	r4, r0, #3
 8002e50:	f024 0403 	bic.w	r4, r4, #3
 8002e54:	42a0      	cmp	r0, r4
 8002e56:	d005      	beq.n	8002e64 <_malloc_r+0xa8>
 8002e58:	1a21      	subs	r1, r4, r0
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 fb08 	bl	8003470 <_sbrk_r>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d0cf      	beq.n	8002e04 <_malloc_r+0x48>
 8002e64:	6025      	str	r5, [r4, #0]
 8002e66:	e7db      	b.n	8002e20 <_malloc_r+0x64>
 8002e68:	200000b8 	.word	0x200000b8
 8002e6c:	200000bc 	.word	0x200000bc

08002e70 <_realloc_r>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	4607      	mov	r7, r0
 8002e74:	4614      	mov	r4, r2
 8002e76:	460e      	mov	r6, r1
 8002e78:	b921      	cbnz	r1, 8002e84 <_realloc_r+0x14>
 8002e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e7e:	4611      	mov	r1, r2
 8002e80:	f7ff bf9c 	b.w	8002dbc <_malloc_r>
 8002e84:	b922      	cbnz	r2, 8002e90 <_realloc_r+0x20>
 8002e86:	f000 fb37 	bl	80034f8 <_free_r>
 8002e8a:	4625      	mov	r5, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e90:	f000 fb7e 	bl	8003590 <_malloc_usable_size_r>
 8002e94:	42a0      	cmp	r0, r4
 8002e96:	d20f      	bcs.n	8002eb8 <_realloc_r+0x48>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f7ff ff8e 	bl	8002dbc <_malloc_r>
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d0f2      	beq.n	8002e8c <_realloc_r+0x1c>
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	f000 faff 	bl	80034ac <memcpy>
 8002eae:	4631      	mov	r1, r6
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	f000 fb21 	bl	80034f8 <_free_r>
 8002eb6:	e7e9      	b.n	8002e8c <_realloc_r+0x1c>
 8002eb8:	4635      	mov	r5, r6
 8002eba:	e7e7      	b.n	8002e8c <_realloc_r+0x1c>

08002ebc <__ssputs_r>:
 8002ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	688e      	ldr	r6, [r1, #8]
 8002ec2:	4682      	mov	sl, r0
 8002ec4:	429e      	cmp	r6, r3
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4690      	mov	r8, r2
 8002eca:	4699      	mov	r9, r3
 8002ecc:	d837      	bhi.n	8002f3e <__ssputs_r+0x82>
 8002ece:	898a      	ldrh	r2, [r1, #12]
 8002ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ed4:	d031      	beq.n	8002f3a <__ssputs_r+0x7e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	6825      	ldr	r5, [r4, #0]
 8002eda:	6909      	ldr	r1, [r1, #16]
 8002edc:	1a6f      	subs	r7, r5, r1
 8002ede:	6965      	ldr	r5, [r4, #20]
 8002ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ee4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ee8:	f109 0301 	add.w	r3, r9, #1
 8002eec:	443b      	add	r3, r7
 8002eee:	429d      	cmp	r5, r3
 8002ef0:	bf38      	it	cc
 8002ef2:	461d      	movcc	r5, r3
 8002ef4:	0553      	lsls	r3, r2, #21
 8002ef6:	d530      	bpl.n	8002f5a <__ssputs_r+0x9e>
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7ff ff5f 	bl	8002dbc <_malloc_r>
 8002efe:	4606      	mov	r6, r0
 8002f00:	b950      	cbnz	r0, 8002f18 <__ssputs_r+0x5c>
 8002f02:	230c      	movs	r3, #12
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f8ca 3000 	str.w	r3, [sl]
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f18:	463a      	mov	r2, r7
 8002f1a:	6921      	ldr	r1, [r4, #16]
 8002f1c:	f000 fac6 	bl	80034ac <memcpy>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2a:	81a3      	strh	r3, [r4, #12]
 8002f2c:	6126      	str	r6, [r4, #16]
 8002f2e:	443e      	add	r6, r7
 8002f30:	6026      	str	r6, [r4, #0]
 8002f32:	464e      	mov	r6, r9
 8002f34:	6165      	str	r5, [r4, #20]
 8002f36:	1bed      	subs	r5, r5, r7
 8002f38:	60a5      	str	r5, [r4, #8]
 8002f3a:	454e      	cmp	r6, r9
 8002f3c:	d900      	bls.n	8002f40 <__ssputs_r+0x84>
 8002f3e:	464e      	mov	r6, r9
 8002f40:	4632      	mov	r2, r6
 8002f42:	4641      	mov	r1, r8
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	f000 fabc 	bl	80034c2 <memmove>
 8002f4a:	68a3      	ldr	r3, [r4, #8]
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	1b9b      	subs	r3, r3, r6
 8002f50:	60a3      	str	r3, [r4, #8]
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	441e      	add	r6, r3
 8002f56:	6026      	str	r6, [r4, #0]
 8002f58:	e7dc      	b.n	8002f14 <__ssputs_r+0x58>
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	f7ff ff88 	bl	8002e70 <_realloc_r>
 8002f60:	4606      	mov	r6, r0
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d1e2      	bne.n	8002f2c <__ssputs_r+0x70>
 8002f66:	6921      	ldr	r1, [r4, #16]
 8002f68:	4650      	mov	r0, sl
 8002f6a:	f000 fac5 	bl	80034f8 <_free_r>
 8002f6e:	e7c8      	b.n	8002f02 <__ssputs_r+0x46>

08002f70 <_svfiprintf_r>:
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	461d      	mov	r5, r3
 8002f76:	898b      	ldrh	r3, [r1, #12]
 8002f78:	b09d      	sub	sp, #116	; 0x74
 8002f7a:	061f      	lsls	r7, r3, #24
 8002f7c:	4680      	mov	r8, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	4616      	mov	r6, r2
 8002f82:	d50f      	bpl.n	8002fa4 <_svfiprintf_r+0x34>
 8002f84:	690b      	ldr	r3, [r1, #16]
 8002f86:	b96b      	cbnz	r3, 8002fa4 <_svfiprintf_r+0x34>
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	f7ff ff17 	bl	8002dbc <_malloc_r>
 8002f8e:	6020      	str	r0, [r4, #0]
 8002f90:	6120      	str	r0, [r4, #16]
 8002f92:	b928      	cbnz	r0, 8002fa0 <_svfiprintf_r+0x30>
 8002f94:	230c      	movs	r3, #12
 8002f96:	f8c8 3000 	str.w	r3, [r8]
 8002f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9e:	e0c8      	b.n	8003132 <_svfiprintf_r+0x1c2>
 8002fa0:	2340      	movs	r3, #64	; 0x40
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa8:	2320      	movs	r3, #32
 8002faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fae:	2330      	movs	r3, #48	; 0x30
 8002fb0:	f04f 0b01 	mov.w	fp, #1
 8002fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fb8:	9503      	str	r5, [sp, #12]
 8002fba:	4637      	mov	r7, r6
 8002fbc:	463d      	mov	r5, r7
 8002fbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002fc2:	b10b      	cbz	r3, 8002fc8 <_svfiprintf_r+0x58>
 8002fc4:	2b25      	cmp	r3, #37	; 0x25
 8002fc6:	d13e      	bne.n	8003046 <_svfiprintf_r+0xd6>
 8002fc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002fcc:	d00b      	beq.n	8002fe6 <_svfiprintf_r+0x76>
 8002fce:	4653      	mov	r3, sl
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	f7ff ff71 	bl	8002ebc <__ssputs_r>
 8002fda:	3001      	adds	r0, #1
 8002fdc:	f000 80a4 	beq.w	8003128 <_svfiprintf_r+0x1b8>
 8002fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe2:	4453      	add	r3, sl
 8002fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe6:	783b      	ldrb	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 809d 	beq.w	8003128 <_svfiprintf_r+0x1b8>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff8:	9304      	str	r3, [sp, #16]
 8002ffa:	9307      	str	r3, [sp, #28]
 8002ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003000:	931a      	str	r3, [sp, #104]	; 0x68
 8003002:	462f      	mov	r7, r5
 8003004:	2205      	movs	r2, #5
 8003006:	f817 1b01 	ldrb.w	r1, [r7], #1
 800300a:	4850      	ldr	r0, [pc, #320]	; (800314c <_svfiprintf_r+0x1dc>)
 800300c:	f000 fa40 	bl	8003490 <memchr>
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	b9d0      	cbnz	r0, 800304a <_svfiprintf_r+0xda>
 8003014:	06d9      	lsls	r1, r3, #27
 8003016:	bf44      	itt	mi
 8003018:	2220      	movmi	r2, #32
 800301a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800301e:	071a      	lsls	r2, r3, #28
 8003020:	bf44      	itt	mi
 8003022:	222b      	movmi	r2, #43	; 0x2b
 8003024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003028:	782a      	ldrb	r2, [r5, #0]
 800302a:	2a2a      	cmp	r2, #42	; 0x2a
 800302c:	d015      	beq.n	800305a <_svfiprintf_r+0xea>
 800302e:	462f      	mov	r7, r5
 8003030:	2000      	movs	r0, #0
 8003032:	250a      	movs	r5, #10
 8003034:	9a07      	ldr	r2, [sp, #28]
 8003036:	4639      	mov	r1, r7
 8003038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800303c:	3b30      	subs	r3, #48	; 0x30
 800303e:	2b09      	cmp	r3, #9
 8003040:	d94d      	bls.n	80030de <_svfiprintf_r+0x16e>
 8003042:	b1b8      	cbz	r0, 8003074 <_svfiprintf_r+0x104>
 8003044:	e00f      	b.n	8003066 <_svfiprintf_r+0xf6>
 8003046:	462f      	mov	r7, r5
 8003048:	e7b8      	b.n	8002fbc <_svfiprintf_r+0x4c>
 800304a:	4a40      	ldr	r2, [pc, #256]	; (800314c <_svfiprintf_r+0x1dc>)
 800304c:	463d      	mov	r5, r7
 800304e:	1a80      	subs	r0, r0, r2
 8003050:	fa0b f000 	lsl.w	r0, fp, r0
 8003054:	4318      	orrs	r0, r3
 8003056:	9004      	str	r0, [sp, #16]
 8003058:	e7d3      	b.n	8003002 <_svfiprintf_r+0x92>
 800305a:	9a03      	ldr	r2, [sp, #12]
 800305c:	1d11      	adds	r1, r2, #4
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	9103      	str	r1, [sp, #12]
 8003062:	2a00      	cmp	r2, #0
 8003064:	db01      	blt.n	800306a <_svfiprintf_r+0xfa>
 8003066:	9207      	str	r2, [sp, #28]
 8003068:	e004      	b.n	8003074 <_svfiprintf_r+0x104>
 800306a:	4252      	negs	r2, r2
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	9207      	str	r2, [sp, #28]
 8003072:	9304      	str	r3, [sp, #16]
 8003074:	783b      	ldrb	r3, [r7, #0]
 8003076:	2b2e      	cmp	r3, #46	; 0x2e
 8003078:	d10c      	bne.n	8003094 <_svfiprintf_r+0x124>
 800307a:	787b      	ldrb	r3, [r7, #1]
 800307c:	2b2a      	cmp	r3, #42	; 0x2a
 800307e:	d133      	bne.n	80030e8 <_svfiprintf_r+0x178>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	3702      	adds	r7, #2
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfb8      	it	lt
 800308e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003092:	9305      	str	r3, [sp, #20]
 8003094:	4d2e      	ldr	r5, [pc, #184]	; (8003150 <_svfiprintf_r+0x1e0>)
 8003096:	2203      	movs	r2, #3
 8003098:	7839      	ldrb	r1, [r7, #0]
 800309a:	4628      	mov	r0, r5
 800309c:	f000 f9f8 	bl	8003490 <memchr>
 80030a0:	b138      	cbz	r0, 80030b2 <_svfiprintf_r+0x142>
 80030a2:	2340      	movs	r3, #64	; 0x40
 80030a4:	1b40      	subs	r0, r0, r5
 80030a6:	fa03 f000 	lsl.w	r0, r3, r0
 80030aa:	9b04      	ldr	r3, [sp, #16]
 80030ac:	3701      	adds	r7, #1
 80030ae:	4303      	orrs	r3, r0
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	7839      	ldrb	r1, [r7, #0]
 80030b4:	2206      	movs	r2, #6
 80030b6:	4827      	ldr	r0, [pc, #156]	; (8003154 <_svfiprintf_r+0x1e4>)
 80030b8:	1c7e      	adds	r6, r7, #1
 80030ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030be:	f000 f9e7 	bl	8003490 <memchr>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d038      	beq.n	8003138 <_svfiprintf_r+0x1c8>
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <_svfiprintf_r+0x1e8>)
 80030c8:	bb13      	cbnz	r3, 8003110 <_svfiprintf_r+0x1a0>
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	3307      	adds	r3, #7
 80030ce:	f023 0307 	bic.w	r3, r3, #7
 80030d2:	3308      	adds	r3, #8
 80030d4:	9303      	str	r3, [sp, #12]
 80030d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030d8:	444b      	add	r3, r9
 80030da:	9309      	str	r3, [sp, #36]	; 0x24
 80030dc:	e76d      	b.n	8002fba <_svfiprintf_r+0x4a>
 80030de:	fb05 3202 	mla	r2, r5, r2, r3
 80030e2:	2001      	movs	r0, #1
 80030e4:	460f      	mov	r7, r1
 80030e6:	e7a6      	b.n	8003036 <_svfiprintf_r+0xc6>
 80030e8:	2300      	movs	r3, #0
 80030ea:	250a      	movs	r5, #10
 80030ec:	4619      	mov	r1, r3
 80030ee:	3701      	adds	r7, #1
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	4638      	mov	r0, r7
 80030f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030f8:	3a30      	subs	r2, #48	; 0x30
 80030fa:	2a09      	cmp	r2, #9
 80030fc:	d903      	bls.n	8003106 <_svfiprintf_r+0x196>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0c8      	beq.n	8003094 <_svfiprintf_r+0x124>
 8003102:	9105      	str	r1, [sp, #20]
 8003104:	e7c6      	b.n	8003094 <_svfiprintf_r+0x124>
 8003106:	fb05 2101 	mla	r1, r5, r1, r2
 800310a:	2301      	movs	r3, #1
 800310c:	4607      	mov	r7, r0
 800310e:	e7f0      	b.n	80030f2 <_svfiprintf_r+0x182>
 8003110:	ab03      	add	r3, sp, #12
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	4622      	mov	r2, r4
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <_svfiprintf_r+0x1ec>)
 8003118:	a904      	add	r1, sp, #16
 800311a:	4640      	mov	r0, r8
 800311c:	f3af 8000 	nop.w
 8003120:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003124:	4681      	mov	r9, r0
 8003126:	d1d6      	bne.n	80030d6 <_svfiprintf_r+0x166>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	065b      	lsls	r3, r3, #25
 800312c:	f53f af35 	bmi.w	8002f9a <_svfiprintf_r+0x2a>
 8003130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003132:	b01d      	add	sp, #116	; 0x74
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003138:	ab03      	add	r3, sp, #12
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4622      	mov	r2, r4
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <_svfiprintf_r+0x1ec>)
 8003140:	a904      	add	r1, sp, #16
 8003142:	4640      	mov	r0, r8
 8003144:	f000 f882 	bl	800324c <_printf_i>
 8003148:	e7ea      	b.n	8003120 <_svfiprintf_r+0x1b0>
 800314a:	bf00      	nop
 800314c:	080035bf 	.word	0x080035bf
 8003150:	080035c5 	.word	0x080035c5
 8003154:	080035c9 	.word	0x080035c9
 8003158:	00000000 	.word	0x00000000
 800315c:	08002ebd 	.word	0x08002ebd

08003160 <_printf_common>:
 8003160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	4691      	mov	r9, r2
 8003166:	461f      	mov	r7, r3
 8003168:	688a      	ldr	r2, [r1, #8]
 800316a:	690b      	ldr	r3, [r1, #16]
 800316c:	4606      	mov	r6, r0
 800316e:	4293      	cmp	r3, r2
 8003170:	bfb8      	it	lt
 8003172:	4613      	movlt	r3, r2
 8003174:	f8c9 3000 	str.w	r3, [r9]
 8003178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800317c:	460c      	mov	r4, r1
 800317e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003182:	b112      	cbz	r2, 800318a <_printf_common+0x2a>
 8003184:	3301      	adds	r3, #1
 8003186:	f8c9 3000 	str.w	r3, [r9]
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	0699      	lsls	r1, r3, #26
 800318e:	bf42      	ittt	mi
 8003190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003194:	3302      	addmi	r3, #2
 8003196:	f8c9 3000 	strmi.w	r3, [r9]
 800319a:	6825      	ldr	r5, [r4, #0]
 800319c:	f015 0506 	ands.w	r5, r5, #6
 80031a0:	d107      	bne.n	80031b2 <_printf_common+0x52>
 80031a2:	f104 0a19 	add.w	sl, r4, #25
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	f8d9 2000 	ldr.w	r2, [r9]
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	42ab      	cmp	r3, r5
 80031b0:	dc29      	bgt.n	8003206 <_printf_common+0xa6>
 80031b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	3300      	adds	r3, #0
 80031ba:	bf18      	it	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	0692      	lsls	r2, r2, #26
 80031c0:	d42e      	bmi.n	8003220 <_printf_common+0xc0>
 80031c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031c6:	4639      	mov	r1, r7
 80031c8:	4630      	mov	r0, r6
 80031ca:	47c0      	blx	r8
 80031cc:	3001      	adds	r0, #1
 80031ce:	d021      	beq.n	8003214 <_printf_common+0xb4>
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	68e5      	ldr	r5, [r4, #12]
 80031d4:	f003 0306 	and.w	r3, r3, #6
 80031d8:	2b04      	cmp	r3, #4
 80031da:	bf18      	it	ne
 80031dc:	2500      	movne	r5, #0
 80031de:	f8d9 2000 	ldr.w	r2, [r9]
 80031e2:	f04f 0900 	mov.w	r9, #0
 80031e6:	bf08      	it	eq
 80031e8:	1aad      	subeq	r5, r5, r2
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	6922      	ldr	r2, [r4, #16]
 80031ee:	bf08      	it	eq
 80031f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031f4:	4293      	cmp	r3, r2
 80031f6:	bfc4      	itt	gt
 80031f8:	1a9b      	subgt	r3, r3, r2
 80031fa:	18ed      	addgt	r5, r5, r3
 80031fc:	341a      	adds	r4, #26
 80031fe:	454d      	cmp	r5, r9
 8003200:	d11a      	bne.n	8003238 <_printf_common+0xd8>
 8003202:	2000      	movs	r0, #0
 8003204:	e008      	b.n	8003218 <_printf_common+0xb8>
 8003206:	2301      	movs	r3, #1
 8003208:	4652      	mov	r2, sl
 800320a:	4639      	mov	r1, r7
 800320c:	4630      	mov	r0, r6
 800320e:	47c0      	blx	r8
 8003210:	3001      	adds	r0, #1
 8003212:	d103      	bne.n	800321c <_printf_common+0xbc>
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321c:	3501      	adds	r5, #1
 800321e:	e7c2      	b.n	80031a6 <_printf_common+0x46>
 8003220:	2030      	movs	r0, #48	; 0x30
 8003222:	18e1      	adds	r1, r4, r3
 8003224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800322e:	4422      	add	r2, r4
 8003230:	3302      	adds	r3, #2
 8003232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003236:	e7c4      	b.n	80031c2 <_printf_common+0x62>
 8003238:	2301      	movs	r3, #1
 800323a:	4622      	mov	r2, r4
 800323c:	4639      	mov	r1, r7
 800323e:	4630      	mov	r0, r6
 8003240:	47c0      	blx	r8
 8003242:	3001      	adds	r0, #1
 8003244:	d0e6      	beq.n	8003214 <_printf_common+0xb4>
 8003246:	f109 0901 	add.w	r9, r9, #1
 800324a:	e7d8      	b.n	80031fe <_printf_common+0x9e>

0800324c <_printf_i>:
 800324c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003254:	460c      	mov	r4, r1
 8003256:	7e09      	ldrb	r1, [r1, #24]
 8003258:	b085      	sub	sp, #20
 800325a:	296e      	cmp	r1, #110	; 0x6e
 800325c:	4617      	mov	r7, r2
 800325e:	4606      	mov	r6, r0
 8003260:	4698      	mov	r8, r3
 8003262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003264:	f000 80b3 	beq.w	80033ce <_printf_i+0x182>
 8003268:	d822      	bhi.n	80032b0 <_printf_i+0x64>
 800326a:	2963      	cmp	r1, #99	; 0x63
 800326c:	d036      	beq.n	80032dc <_printf_i+0x90>
 800326e:	d80a      	bhi.n	8003286 <_printf_i+0x3a>
 8003270:	2900      	cmp	r1, #0
 8003272:	f000 80b9 	beq.w	80033e8 <_printf_i+0x19c>
 8003276:	2958      	cmp	r1, #88	; 0x58
 8003278:	f000 8083 	beq.w	8003382 <_printf_i+0x136>
 800327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003284:	e032      	b.n	80032ec <_printf_i+0xa0>
 8003286:	2964      	cmp	r1, #100	; 0x64
 8003288:	d001      	beq.n	800328e <_printf_i+0x42>
 800328a:	2969      	cmp	r1, #105	; 0x69
 800328c:	d1f6      	bne.n	800327c <_printf_i+0x30>
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	0605      	lsls	r5, r0, #24
 8003294:	f103 0104 	add.w	r1, r3, #4
 8003298:	d52a      	bpl.n	80032f0 <_printf_i+0xa4>
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da03      	bge.n	80032aa <_printf_i+0x5e>
 80032a2:	222d      	movs	r2, #45	; 0x2d
 80032a4:	425b      	negs	r3, r3
 80032a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80032aa:	486f      	ldr	r0, [pc, #444]	; (8003468 <_printf_i+0x21c>)
 80032ac:	220a      	movs	r2, #10
 80032ae:	e039      	b.n	8003324 <_printf_i+0xd8>
 80032b0:	2973      	cmp	r1, #115	; 0x73
 80032b2:	f000 809d 	beq.w	80033f0 <_printf_i+0x1a4>
 80032b6:	d808      	bhi.n	80032ca <_printf_i+0x7e>
 80032b8:	296f      	cmp	r1, #111	; 0x6f
 80032ba:	d020      	beq.n	80032fe <_printf_i+0xb2>
 80032bc:	2970      	cmp	r1, #112	; 0x70
 80032be:	d1dd      	bne.n	800327c <_printf_i+0x30>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f043 0320 	orr.w	r3, r3, #32
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	e003      	b.n	80032d2 <_printf_i+0x86>
 80032ca:	2975      	cmp	r1, #117	; 0x75
 80032cc:	d017      	beq.n	80032fe <_printf_i+0xb2>
 80032ce:	2978      	cmp	r1, #120	; 0x78
 80032d0:	d1d4      	bne.n	800327c <_printf_i+0x30>
 80032d2:	2378      	movs	r3, #120	; 0x78
 80032d4:	4865      	ldr	r0, [pc, #404]	; (800346c <_printf_i+0x220>)
 80032d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032da:	e055      	b.n	8003388 <_printf_i+0x13c>
 80032dc:	6813      	ldr	r3, [r2, #0]
 80032de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e2:	1d19      	adds	r1, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6011      	str	r1, [r2, #0]
 80032e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ec:	2301      	movs	r3, #1
 80032ee:	e08c      	b.n	800340a <_printf_i+0x1be>
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032f6:	6011      	str	r1, [r2, #0]
 80032f8:	bf18      	it	ne
 80032fa:	b21b      	sxthne	r3, r3
 80032fc:	e7cf      	b.n	800329e <_printf_i+0x52>
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1d18      	adds	r0, r3, #4
 8003304:	6010      	str	r0, [r2, #0]
 8003306:	0628      	lsls	r0, r5, #24
 8003308:	d501      	bpl.n	800330e <_printf_i+0xc2>
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e002      	b.n	8003314 <_printf_i+0xc8>
 800330e:	0668      	lsls	r0, r5, #25
 8003310:	d5fb      	bpl.n	800330a <_printf_i+0xbe>
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	296f      	cmp	r1, #111	; 0x6f
 8003316:	bf14      	ite	ne
 8003318:	220a      	movne	r2, #10
 800331a:	2208      	moveq	r2, #8
 800331c:	4852      	ldr	r0, [pc, #328]	; (8003468 <_printf_i+0x21c>)
 800331e:	2100      	movs	r1, #0
 8003320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003324:	6865      	ldr	r5, [r4, #4]
 8003326:	2d00      	cmp	r5, #0
 8003328:	60a5      	str	r5, [r4, #8]
 800332a:	f2c0 8095 	blt.w	8003458 <_printf_i+0x20c>
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	f021 0104 	bic.w	r1, r1, #4
 8003334:	6021      	str	r1, [r4, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d13d      	bne.n	80033b6 <_printf_i+0x16a>
 800333a:	2d00      	cmp	r5, #0
 800333c:	f040 808e 	bne.w	800345c <_printf_i+0x210>
 8003340:	4665      	mov	r5, ip
 8003342:	2a08      	cmp	r2, #8
 8003344:	d10b      	bne.n	800335e <_printf_i+0x112>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	07db      	lsls	r3, r3, #31
 800334a:	d508      	bpl.n	800335e <_printf_i+0x112>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	6862      	ldr	r2, [r4, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	bfde      	ittt	le
 8003354:	2330      	movle	r3, #48	; 0x30
 8003356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800335a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800335e:	ebac 0305 	sub.w	r3, ip, r5
 8003362:	6123      	str	r3, [r4, #16]
 8003364:	f8cd 8000 	str.w	r8, [sp]
 8003368:	463b      	mov	r3, r7
 800336a:	aa03      	add	r2, sp, #12
 800336c:	4621      	mov	r1, r4
 800336e:	4630      	mov	r0, r6
 8003370:	f7ff fef6 	bl	8003160 <_printf_common>
 8003374:	3001      	adds	r0, #1
 8003376:	d14d      	bne.n	8003414 <_printf_i+0x1c8>
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	b005      	add	sp, #20
 800337e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003382:	4839      	ldr	r0, [pc, #228]	; (8003468 <_printf_i+0x21c>)
 8003384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	6821      	ldr	r1, [r4, #0]
 800338c:	1d1d      	adds	r5, r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6015      	str	r5, [r2, #0]
 8003392:	060a      	lsls	r2, r1, #24
 8003394:	d50b      	bpl.n	80033ae <_printf_i+0x162>
 8003396:	07ca      	lsls	r2, r1, #31
 8003398:	bf44      	itt	mi
 800339a:	f041 0120 	orrmi.w	r1, r1, #32
 800339e:	6021      	strmi	r1, [r4, #0]
 80033a0:	b91b      	cbnz	r3, 80033aa <_printf_i+0x15e>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	f022 0220 	bic.w	r2, r2, #32
 80033a8:	6022      	str	r2, [r4, #0]
 80033aa:	2210      	movs	r2, #16
 80033ac:	e7b7      	b.n	800331e <_printf_i+0xd2>
 80033ae:	064d      	lsls	r5, r1, #25
 80033b0:	bf48      	it	mi
 80033b2:	b29b      	uxthmi	r3, r3
 80033b4:	e7ef      	b.n	8003396 <_printf_i+0x14a>
 80033b6:	4665      	mov	r5, ip
 80033b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80033bc:	fb02 3311 	mls	r3, r2, r1, r3
 80033c0:	5cc3      	ldrb	r3, [r0, r3]
 80033c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80033c6:	460b      	mov	r3, r1
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d1f5      	bne.n	80033b8 <_printf_i+0x16c>
 80033cc:	e7b9      	b.n	8003342 <_printf_i+0xf6>
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	6825      	ldr	r5, [r4, #0]
 80033d2:	1d18      	adds	r0, r3, #4
 80033d4:	6961      	ldr	r1, [r4, #20]
 80033d6:	6010      	str	r0, [r2, #0]
 80033d8:	0628      	lsls	r0, r5, #24
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	d501      	bpl.n	80033e2 <_printf_i+0x196>
 80033de:	6019      	str	r1, [r3, #0]
 80033e0:	e002      	b.n	80033e8 <_printf_i+0x19c>
 80033e2:	066a      	lsls	r2, r5, #25
 80033e4:	d5fb      	bpl.n	80033de <_printf_i+0x192>
 80033e6:	8019      	strh	r1, [r3, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	4665      	mov	r5, ip
 80033ec:	6123      	str	r3, [r4, #16]
 80033ee:	e7b9      	b.n	8003364 <_printf_i+0x118>
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	1d19      	adds	r1, r3, #4
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	681d      	ldr	r5, [r3, #0]
 80033f8:	6862      	ldr	r2, [r4, #4]
 80033fa:	2100      	movs	r1, #0
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 f847 	bl	8003490 <memchr>
 8003402:	b108      	cbz	r0, 8003408 <_printf_i+0x1bc>
 8003404:	1b40      	subs	r0, r0, r5
 8003406:	6060      	str	r0, [r4, #4]
 8003408:	6863      	ldr	r3, [r4, #4]
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	2300      	movs	r3, #0
 800340e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003412:	e7a7      	b.n	8003364 <_printf_i+0x118>
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	462a      	mov	r2, r5
 8003418:	4639      	mov	r1, r7
 800341a:	4630      	mov	r0, r6
 800341c:	47c0      	blx	r8
 800341e:	3001      	adds	r0, #1
 8003420:	d0aa      	beq.n	8003378 <_printf_i+0x12c>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	079b      	lsls	r3, r3, #30
 8003426:	d413      	bmi.n	8003450 <_printf_i+0x204>
 8003428:	68e0      	ldr	r0, [r4, #12]
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	4298      	cmp	r0, r3
 800342e:	bfb8      	it	lt
 8003430:	4618      	movlt	r0, r3
 8003432:	e7a3      	b.n	800337c <_printf_i+0x130>
 8003434:	2301      	movs	r3, #1
 8003436:	464a      	mov	r2, r9
 8003438:	4639      	mov	r1, r7
 800343a:	4630      	mov	r0, r6
 800343c:	47c0      	blx	r8
 800343e:	3001      	adds	r0, #1
 8003440:	d09a      	beq.n	8003378 <_printf_i+0x12c>
 8003442:	3501      	adds	r5, #1
 8003444:	68e3      	ldr	r3, [r4, #12]
 8003446:	9a03      	ldr	r2, [sp, #12]
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	42ab      	cmp	r3, r5
 800344c:	dcf2      	bgt.n	8003434 <_printf_i+0x1e8>
 800344e:	e7eb      	b.n	8003428 <_printf_i+0x1dc>
 8003450:	2500      	movs	r5, #0
 8003452:	f104 0919 	add.w	r9, r4, #25
 8003456:	e7f5      	b.n	8003444 <_printf_i+0x1f8>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ac      	bne.n	80033b6 <_printf_i+0x16a>
 800345c:	7803      	ldrb	r3, [r0, #0]
 800345e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003466:	e76c      	b.n	8003342 <_printf_i+0xf6>
 8003468:	080035d0 	.word	0x080035d0
 800346c:	080035e1 	.word	0x080035e1

08003470 <_sbrk_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	2300      	movs	r3, #0
 8003474:	4c05      	ldr	r4, [pc, #20]	; (800348c <_sbrk_r+0x1c>)
 8003476:	4605      	mov	r5, r0
 8003478:	4608      	mov	r0, r1
 800347a:	6023      	str	r3, [r4, #0]
 800347c:	f7ff fbf4 	bl	8002c68 <_sbrk>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_sbrk_r+0x1a>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	b103      	cbz	r3, 800348a <_sbrk_r+0x1a>
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20000160 	.word	0x20000160

08003490 <memchr>:
 8003490:	b510      	push	{r4, lr}
 8003492:	b2c9      	uxtb	r1, r1
 8003494:	4402      	add	r2, r0
 8003496:	4290      	cmp	r0, r2
 8003498:	4603      	mov	r3, r0
 800349a:	d101      	bne.n	80034a0 <memchr+0x10>
 800349c:	2300      	movs	r3, #0
 800349e:	e003      	b.n	80034a8 <memchr+0x18>
 80034a0:	781c      	ldrb	r4, [r3, #0]
 80034a2:	3001      	adds	r0, #1
 80034a4:	428c      	cmp	r4, r1
 80034a6:	d1f6      	bne.n	8003496 <memchr+0x6>
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd10      	pop	{r4, pc}

080034ac <memcpy>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	1e43      	subs	r3, r0, #1
 80034b0:	440a      	add	r2, r1
 80034b2:	4291      	cmp	r1, r2
 80034b4:	d100      	bne.n	80034b8 <memcpy+0xc>
 80034b6:	bd10      	pop	{r4, pc}
 80034b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034c0:	e7f7      	b.n	80034b2 <memcpy+0x6>

080034c2 <memmove>:
 80034c2:	4288      	cmp	r0, r1
 80034c4:	b510      	push	{r4, lr}
 80034c6:	eb01 0302 	add.w	r3, r1, r2
 80034ca:	d807      	bhi.n	80034dc <memmove+0x1a>
 80034cc:	1e42      	subs	r2, r0, #1
 80034ce:	4299      	cmp	r1, r3
 80034d0:	d00a      	beq.n	80034e8 <memmove+0x26>
 80034d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80034da:	e7f8      	b.n	80034ce <memmove+0xc>
 80034dc:	4283      	cmp	r3, r0
 80034de:	d9f5      	bls.n	80034cc <memmove+0xa>
 80034e0:	1881      	adds	r1, r0, r2
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	42d3      	cmn	r3, r2
 80034e6:	d100      	bne.n	80034ea <memmove+0x28>
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80034f2:	e7f7      	b.n	80034e4 <memmove+0x22>

080034f4 <__malloc_lock>:
 80034f4:	4770      	bx	lr

080034f6 <__malloc_unlock>:
 80034f6:	4770      	bx	lr

080034f8 <_free_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4605      	mov	r5, r0
 80034fc:	2900      	cmp	r1, #0
 80034fe:	d043      	beq.n	8003588 <_free_r+0x90>
 8003500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003504:	1f0c      	subs	r4, r1, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfb8      	it	lt
 800350a:	18e4      	addlt	r4, r4, r3
 800350c:	f7ff fff2 	bl	80034f4 <__malloc_lock>
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <_free_r+0x94>)
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	4610      	mov	r0, r2
 8003516:	b933      	cbnz	r3, 8003526 <_free_r+0x2e>
 8003518:	6063      	str	r3, [r4, #4]
 800351a:	6014      	str	r4, [r2, #0]
 800351c:	4628      	mov	r0, r5
 800351e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003522:	f7ff bfe8 	b.w	80034f6 <__malloc_unlock>
 8003526:	42a3      	cmp	r3, r4
 8003528:	d90b      	bls.n	8003542 <_free_r+0x4a>
 800352a:	6821      	ldr	r1, [r4, #0]
 800352c:	1862      	adds	r2, r4, r1
 800352e:	4293      	cmp	r3, r2
 8003530:	bf01      	itttt	eq
 8003532:	681a      	ldreq	r2, [r3, #0]
 8003534:	685b      	ldreq	r3, [r3, #4]
 8003536:	1852      	addeq	r2, r2, r1
 8003538:	6022      	streq	r2, [r4, #0]
 800353a:	6063      	str	r3, [r4, #4]
 800353c:	6004      	str	r4, [r0, #0]
 800353e:	e7ed      	b.n	800351c <_free_r+0x24>
 8003540:	4613      	mov	r3, r2
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	b10a      	cbz	r2, 800354a <_free_r+0x52>
 8003546:	42a2      	cmp	r2, r4
 8003548:	d9fa      	bls.n	8003540 <_free_r+0x48>
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	1858      	adds	r0, r3, r1
 800354e:	42a0      	cmp	r0, r4
 8003550:	d10b      	bne.n	800356a <_free_r+0x72>
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	4401      	add	r1, r0
 8003556:	1858      	adds	r0, r3, r1
 8003558:	4282      	cmp	r2, r0
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	d1de      	bne.n	800351c <_free_r+0x24>
 800355e:	6810      	ldr	r0, [r2, #0]
 8003560:	6852      	ldr	r2, [r2, #4]
 8003562:	4401      	add	r1, r0
 8003564:	6019      	str	r1, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e7d8      	b.n	800351c <_free_r+0x24>
 800356a:	d902      	bls.n	8003572 <_free_r+0x7a>
 800356c:	230c      	movs	r3, #12
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	e7d4      	b.n	800351c <_free_r+0x24>
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1821      	adds	r1, r4, r0
 8003576:	428a      	cmp	r2, r1
 8003578:	bf01      	itttt	eq
 800357a:	6811      	ldreq	r1, [r2, #0]
 800357c:	6852      	ldreq	r2, [r2, #4]
 800357e:	1809      	addeq	r1, r1, r0
 8003580:	6021      	streq	r1, [r4, #0]
 8003582:	6062      	str	r2, [r4, #4]
 8003584:	605c      	str	r4, [r3, #4]
 8003586:	e7c9      	b.n	800351c <_free_r+0x24>
 8003588:	bd38      	pop	{r3, r4, r5, pc}
 800358a:	bf00      	nop
 800358c:	200000b8 	.word	0x200000b8

08003590 <_malloc_usable_size_r>:
 8003590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003594:	1f18      	subs	r0, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	bfbc      	itt	lt
 800359a:	580b      	ldrlt	r3, [r1, r0]
 800359c:	18c0      	addlt	r0, r0, r3
 800359e:	4770      	bx	lr

080035a0 <_init>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	bf00      	nop
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr

080035ac <_fini>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr
